<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DWF’s Journal</title>
  <subtitle>A computer is just a BIG. PENCIL.</subtitle>
  <link href="http://example.com/feed.xml" rel="self"/>
  <link href="http://example.com/"/>
  <id>urn:uuid:b7b7a839-4395-4fd8-b897-9256f2f64957</id>
  <updated>2020-09-19T16:32:14-07:00</updated>
  <author>
    <name>Davis W. Frank</name>
  </author>
  <rights>© Davis W. Frank 2020</rights>
  <entry>
    <title>Foo Fighters 1995</title>
    <link href="http://example.com/foo-fighters-1995" rel="alternate"/>
    <id/>
    <published>2020-09-14T17:00:00-07:00</published>
    <updated>2020-09-19T16:32:14-07:00</updated>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;A tweetstorm I wrote up from being at a very early Foo Fighters&amp;rsquo; show. I&amp;rsquo;ve kept this in Tweet format because I wrote it in 280-word segments.
&lt;br/&gt;&lt;br/&gt;&amp;ndash;dwf&lt;/em&gt; &lt;/p&gt;

&lt;hr&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;My Amazing Rock’n’Roll moments. Next in a series. &lt;br&gt;&lt;br&gt;Foo Fighters first tour. May 13th 1995. Or maybe the July show. Portland, Oregon. La Luna. An amazing venue that doesn’t do rock shows anymore. 1/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724884052443136?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt; 

&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;But an absolutely AMAZING mosh pit. Near the end of the show, the band took a short breather to change guitars or something. And we all stood there, spent.&lt;br&gt;&lt;br&gt;Then they started “Exhausted.” But nobody was dancing. We were all too tired. 2/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724884799037440?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;I was in the middle of the room at the edge of a big circle of people. I wanted to keep the excitement. After a 30 seconds or so, when the song is still slow, I tucked in my arms and started rolling slowly to the tempo off of everyone along the inside of the circle. 3/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724885503602689?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt; 

&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;Just me became two or three, then four people. Not crazy dancing, but just building. And building. Just like the song. By the crescendo we had the pit at full strength. That song felt like it went on forever. Just forever. It was so special. 4/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724886187302915?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;Fast forward about 4 months. The tour is wrapping up. And I’m listening to a Westwood One interview with the band on a Sunday night. They start taking calls from the audience. “What was your favorite show during this tour?” 5/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724886896144384?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;Dave Grohl- “It’s just so great to be on tour. That we’ve picked up fans and they’ve embraced us. And the shows everywhere have been beyond what we’ve could have ever expected.” 6/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724887579779072?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt;

&lt;blockquote class="twitter-tweet" data-conversation="none"&gt;&lt;p lang="en" dir="ltr"&gt;Then one of the other band members jumps in. “You member that one night in Portland? When they started MOSHING? To f’n EXHAUSTED? That never happens.” Dave - “Oh, yeah. By the end that was NUTS. What a show!”&lt;br&gt;🎸🕺🤘 &lt;br&gt;7/7&lt;/p&gt;&amp;mdash; Thank You for being a VOTER (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1305724888284504064?ref_src=twsrc%5Etfw"&gt;September 15, 2020&lt;/a&gt;&lt;/blockquote&gt; 
</content>
  </entry>
  <entry>
    <title>Drake Your Job</title>
    <link href="http://example.com/drake-your-job" rel="alternate"/>
    <id/>
    <published>2018-08-02T17:00:00-07:00</published>
    <updated>2020-09-19T14:58:16-07:00</updated>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;I originally published this on &lt;a href="https://blog.usejournal.com/drake-your-job-5c55b706bb18"&gt;Medium&lt;/a&gt; in 2018. I&amp;rsquo;ve made a few copy edits, but the content and intent is the same. 
&lt;br/&gt;&lt;br/&gt;&amp;ndash;dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;How much do you love your job? You can measure some job characteristics like salary, benefits, or round-trip commute time. But what about the intangibles? Do you have a good manager? Are you learning? Are you happy? Measuring these abstract things seems hard. But if we can’t measure it, how can we improve it?&lt;/p&gt;

&lt;p&gt;What if you measured everything about your job and calculated an overall score? You could pick an area to change to improve your score. Or you could compare the score of your current job and new potential jobs. How can you turn this mix of concrete numbers, fuzzy feelings, and abstract concepts into useful information in order to help direct your career?&lt;/p&gt;

&lt;h2&gt;The Drake Equation&lt;/h2&gt;

&lt;p&gt;At the birth of SETI.org, Dr. Frank Drake decided to estimate the number of potential planets with intelligent life. And while it’s a very rough estimate, the birth of the Drake Equation calculated a number that inspired scientists to reach for the stars.&lt;/p&gt;

&lt;p&gt;What does this have to do with valuing your job?&lt;/p&gt;

&lt;p&gt;Michael Dearing of Harrison Metal has &lt;a href="https://www.harrisonmetal.com/library/drake-s-equation"&gt;a video&lt;/a&gt; and a &lt;a href="https://medium.com/@mcgd/drakes-equation-e967535a76ac"&gt;blog post&lt;/a&gt; that shares the Drake Equation’s history and suggests that it’s applicable to any seemingly unquantifiable thing. What would it look like to build a “Drake Job Equation,” taking into consideration all the components of your job? Let’s give it a try.&lt;/p&gt;

&lt;h2&gt;What’s Important?&lt;/h2&gt;

&lt;p&gt;First, list which job characteristics are important to you. Take some time and make a list. Here’s what I came up with, based on what matters to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Compensation&lt;/em&gt; — Money matters! Base salary, any bonus, stock options or shares, and benefits.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Organization&lt;/em&gt; — How do I feel about the company or organization? Do my leaders inspire me? Do my values align?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Manager&lt;/em&gt; — Is my manager helpful in my career? Do we meet regularly? Do they listen? Do they explain the “Why?” as well as the “What?” when I have questions?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Peers&lt;/em&gt; — Do they have my trust and respect? Do I have coffee and lunch buddies? Do I invite them over for dinner?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Commute&lt;/em&gt; — How long do I spend getting to the job every day? Does it leave me enough time for the rest of my life?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Office location&lt;/em&gt; — Is the office in a place that inspires me daily? Is it easy to schedule time with my friends and mentors at other companies? Can I run errands at lunch?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The company’s main product or service&lt;/em&gt; — Is my work going toward a product or service that I admire or respect? That I would use regularly? Would I be proud to recommend it to friends and family?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The work&lt;/em&gt; — Is my work energizing? Is it fun? Is it interesting?&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Opportunity to learn&lt;/em&gt; — Are I adding to my skillset? Is this job going to help me get the next one?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Drake Job Equation&lt;/h2&gt;

&lt;p&gt;Now that you have a list of potential terms, you need to combine them into a Drake equation. Let’s assume that the compensation is the base of your score. The other terms should increase or decrease that to get a final value. The bigger the score, the better the job is likely to be. A lower score should be a catalyst to do some deeper thinking.&lt;/p&gt;

&lt;p&gt;Combining my terms, I got this formula:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Value.job = 
    Comp * 
    Q.org * Q.mgr * Q.peers * Q.commute * Q.location * 
    M.product * M.work * Freq.learning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C is compensation. Start with cash salary. Add any bonuses. Add the net gain from any stock options, RSU’s, or an employee stock program. And don’t forget any other benefits — health insurance, discount on public transit, gym memberships, etc. Add those in. If you don’t have exact amounts for any of your compensation numbers — for example, your company isn’t public yet so you can only guess about stock options — just make a reasonable estimate.&lt;/p&gt;

&lt;p&gt;The next group of other terms is for “quality” terms. Each of these terms needs a range of values that reduces or amplifies the score based on each term’s impact. I recommend a range of 0.1 to 2. A value of 0.1 maps to “poor quality” or “this part of my job sucks.” This low term should be pulling down the overall job score. Why 0.1? Because we need to talk about zeroes.&lt;/p&gt;

&lt;p&gt;Any low term will pull your score down significantly. Be honest as you ask yourself about each term. But a zero will make the entire score zero. If your final job score is zero, it’s probably time to open up LinkedIn. A value of 0.1 serves as a nice floor that sends the right message without screaming “QUIT” and rendering the rest of the formula moot.&lt;/p&gt;

&lt;p&gt;A 1 means things are “just OK”. A value of 1 doesn’t reduce or amplify the overall score. A 2 means that things are “GREAT”, meaning it doubles your overall score. And keeping the ceiling at 2 means that any one term does not overwhelm the rest.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Quality of Organization:&lt;/em&gt; Q.org score between 0.1 and 2.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Quality of Manager:&lt;/em&gt; Q.mgr score between 0.1 and 2.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Quality of Peers:&lt;/em&gt; Q.peers score between 0.1 and 2.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Quality of Commute:&lt;/em&gt; Q.commute score between 0.1 and 2.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Quality of Location:&lt;/em&gt; Q.location score between 0.1 and 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next group is for motivation scores. Motivation matters a lot to me, so I decided on a higher ceiling of 5. Feel free to tweak these ranges.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Motivation from Product:&lt;/em&gt; M.product score between 0.1 and 5.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Motivation from Work:&lt;/em&gt; M.work score between 0.1 and 5.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Frequency of Learning Opportunities:&lt;/em&gt; Freq.learning score between 0.1 and 5.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Using The Equation&lt;/h2&gt;

&lt;p&gt;Let’s say your total compensation comes out to $50,000 this year. You love the company, have a pretty good manager, fine teammates, a soul-sucking commute, a great location, you love the product, don’t love the work you’re doing, and you are learning a reasonable amount. Using my equation, we get this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;50,000 * 2 * 1.25 * 1 * 0.25 * 2 * 3 * 2 * 3 = 1,125,000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you have a score. What do you do with it?&lt;/p&gt;

&lt;p&gt;Just doing the evaluation is helpful. You now have a list of items worth investigating for improvement — those things that are preventing you from getting more out of your current job. Your commute is awful, but you love the location. Can you carpool with some coworkers? Is there a public transit option? Your current work isn’t exciting, but you like the company and product. Can you bring this up with your manager? Could you transfer to another job in the company?&lt;/p&gt;

&lt;p&gt;But if the areas for improvement are all outside of your control, maybe it’s time to look for a new job. Evaluate each term as you interview at a company and score each opportunity. Compare these scores as you go.&lt;/p&gt;

&lt;p&gt;You won’t have an offer yet, but you can play with the compensation value. What compensation amount would make you take an offer? Haven’t met enough of the team to make a guess about the peers? Schedule a follow-up lunch. Curious about other aspects of the new job? Use your network to find folks who can help you refine your estimates. There will be lots of ambiguity. Resolve what you can and estimate the rest.&lt;/p&gt;

&lt;p&gt;Getting to a score is a tool, not a conclusion. So get as close as is practical that helps you answer the question at hand. Do you love your job? How about your next one?&lt;/p&gt;

&lt;p&gt;What are the components of &lt;em&gt;your&lt;/em&gt; Drake Job Equation?&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How One Funny Email Almost Changed My Career</title>
    <link href="http://example.com/how-one-funny-email-almost-changed-my-career" rel="alternate"/>
    <id/>
    <published>2016-10-05T17:00:00-07:00</published>
    <updated>2020-09-19T14:58:57-07:00</updated>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://medium.com/@dwfrank/how-one-funny-email-almost-changed-my-career-80b20ee7c5ff"&gt;Medium&lt;/a&gt;. But really originally published on Palm&amp;rsquo;s Outlook server in 2006.
&lt;br/&gt;&lt;br/&gt;&amp;ndash;dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;In 2006 it was time that I left my job at Palm. When you leave a job in tech, you send a goodbye email.
When you think yourself a fun and funny co-worker, you want that email to be &lt;em&gt;hilarious&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Subject: Where&amp;rsquo;s DWF? as of 6/2&lt;/p&gt;

&lt;p&gt;Thanks so much for your good wishes in the past week. Many of you have asked what I&amp;rsquo;m going to be doing after Palm. You know I can&amp;rsquo;t keep a secret from you guys for long. So here are the details.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to get out of the crazy world of high tech and pursue success in the low-margin, high hype world of the beverage industry. It won&amp;rsquo;t be long before my line of energy drinks, GoJ (pronounced &amp;ldquo;GO-J&amp;rdquo;), hits the shelves of your local quickie-, super- or mega-mart.&lt;/p&gt;

&lt;p&gt;GoJ will start with good old-fashioned orange juice and finish laced with the FDA maximum concentration of caffeine. None of this high fructose corn syrup water that tastes like it might have been mixed in an orange container. Instead we&amp;rsquo;ll use only the best fresh-squeezed, flash-pasteurized juice mixed with the purest caffeine molecules our state-of-the-art laboratory can synthesize.&lt;/p&gt;

&lt;p&gt;Our first target customers are the Slashdot crowd, selling them on the fact that one 500ml bottle not only has the equivalent caffeine to 6 cans of Jolt Cola or 4 cans of Red Bull (or just one cup of 2nd-floor Peet&amp;rsquo;s coffee), but it also meets their recommended daily allowance of fruits and vegetables. The web ad campaign, with our initial slogan &amp;ldquo;I&amp;rsquo;m on it!&amp;rdquo;, will run late summer featuring none other than Palm&amp;rsquo;s own &lt;NAME REDACTED&gt;.&lt;/p&gt;

&lt;p&gt;Next we&amp;rsquo;ll move to a broader customer base with other flavors, including lemonade, strawberry-kiwi, and a proprietary blend of guava, apple, starfruit and pineapple we&amp;rsquo;re calling &amp;ldquo;GoJ-GASP.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;At some point we&amp;rsquo;ll need a sports celebrity spokesperson. I&amp;rsquo;m thrilled to announce that we&amp;rsquo;re in negotiations to sign Barry Bonds. Millions of kids will drink GoJ and declare under oath our new slogan &amp;ldquo;It&amp;rsquo;s the juice!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Keep in touch. I&amp;rsquo;m on LinkedIn. And if ever want to make the leap out of tech, we&amp;rsquo;ll be looking for people to drive the delivery trucks.&lt;/p&gt;

&lt;p&gt;&amp;ndash;dwf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got the laughs, kudos and high-fives I wanted. And I went on with my last days. But funny emails get forwarded.&lt;/p&gt;

&lt;p&gt;My last few days were spent explaining the joke. And the references. And the fact that no, I didn&amp;rsquo;t have any juice you could try. Or delivery trucks. Or job applications. Or a job.&lt;/p&gt;

&lt;p&gt;Three weeks later, I got a call from a friend-of-a-friend-of-a-coworker who was a beverage distributor in LA. I think he wanted to invest.&lt;/p&gt;

&lt;p&gt;Eight years later, at a Handspring/Palm reunion party I was talking shop with someone who received the email directly that day. She looked at me, squinted and asked, &amp;ldquo;Wait. I thought you were making juice?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I guess I do.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How We XP: Develop &amp; Deploy</title>
    <link href="http://example.com/how-we-xp" rel="alternate"/>
    <id/>
    <published>2015-10-31T17:00:00-07:00</published>
    <updated>2020-09-19T16:32:14-07:00</updated>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Originally written (and posted to &lt;a href="https://medium.com/@dwfrank/how-we-xp-develop-deploy-13faf089420b"&gt;Medium&lt;/a&gt;) for a friend who while around software for a while, and seen some agile teams, he was just starting to manage one directly. So I wrote up this bit of a braindump.
&lt;br/&gt;&lt;br/&gt;&amp;ndash;dwf&lt;/em&gt; &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I&amp;rsquo;m not going to go into planning. That&amp;rsquo;s another post.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to assume that stories &amp;mdash; the work that is to be done &amp;mdash; are broken into small, individually-acceptable pieces of work. &amp;ldquo;Acceptable&amp;rdquo; means that a Product Manager (PM) can verify that developers did the agreed work completely. Keeping the stories small means it is easier to make progress, show progress, and validate progress.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also assuming that the team is using git for version control, the developers are test-driving their code (Test-driven Development or TDD), the current test suite is green on a Continuous Integration system (CI), and that we are talking about a web app.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All new development is done locally&lt;/li&gt;
&lt;li&gt;Developers pull up to latest code and run the test suite. It should be green. If not, fix it and push back to origin before continuing.&lt;/li&gt;
&lt;li&gt;Developers test drive the new feature.&lt;/li&gt;
&lt;li&gt;When developers think the story is done based on the acceptance criteria agreed-upon with the PM, all tests should be green and the new functionality should be working as expected.&lt;/li&gt;
&lt;li&gt;This is a great time for developers to find refactoring or dead code and clean those up as well. Tests should stay green.&lt;/li&gt;
&lt;li&gt;Developers now pull up to latest code from origin in case another part of the team has pushed new code. If there are changes, merge and run tests again. If there are broken tests, fix them before continuing.&lt;/li&gt;
&lt;li&gt;Optional: some teams like feature branches. They should be short-lived and merged/re-based with master often. The longer your changes stay away from master, the more tech debt you create. Merge early, merge often. Git-flow is a pretty good pattern here.
= Once all tests are green locally and all changes are ahead of origin master, push to origin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Continuous Integration (CI)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Your git repo should have a post-commit hook that starts a CI build. On every push to master, no exceptions.&lt;/li&gt;
&lt;li&gt;This is a full test run on a server that looks as close to your Production deploy configuration as possible.&lt;/li&gt;
&lt;li&gt;This can be a long pipeline. Run unit tests, run integrations and functional tests and regression tests - whatever. Often your pipeline will have later stages that integrate multiple apps/services and cross-browser tests. Make sure you are getting feedback at all stages of the pipeline.&lt;/li&gt;
&lt;li&gt;When CI is green all the way, you should have a CI step that deploys to Staging. This should happen several times per day. And if it&amp;rsquo;s automated, even better.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Staging (aka Acceptance)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Staging is a deployment (or environment) that looks exactly like Production, with the same versions of OS, database, etc.&lt;/li&gt;
&lt;li&gt;Staging doesn&amp;rsquo;t need to serve the same capacity &amp;mdash; so maybe just a primary database (no replication or secondaries ). Since there will be fewer active users, you probably only need one app server.&lt;/li&gt;
&lt;li&gt;Optional: If your system has feature that needs acceptance that requires master/slave DB or app server failover, then by all means install/configure Staging to match that configuration.&lt;/li&gt;
&lt;li&gt;Everyone should know when a Staging deploy is done and what new work it contains. Notify the team via email or an information radiator.&lt;/li&gt;
&lt;li&gt;PM should verify work is done as expected on Staging. Validating that work is complete is PM&amp;rsquo;s role, Not QA.&lt;/li&gt;
&lt;li&gt;If work is not satisfactory, Reject the work. Rejected work should be started before any new work is started.&lt;/li&gt;
&lt;li&gt;If something is broken that used to work, PM writes a bug. PM should prioritize bugs against other work. That is, a given bug may not be as important to fix as some new feature stories.&lt;/li&gt;
&lt;li&gt;QA should be looking at Staging to find bugs, problems, regressions, or any inconsistencies. They should be using the product as a user would and should be looking for behavior that engineering and product didn&amp;rsquo;t find. This is often called exploratory QA. You should have your QA lead read the book on Exploratory QA, &lt;a href="https://www.amazon.com/Explore-Increase-Confidence-Exploratory-Testing/dp/1937785025"&gt;Explore It!&lt;/a&gt; written by my good friend and colleague, &lt;a href="https://twitter.com/testobsessed"&gt;Elisabeth Hendrickson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Production&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Production is where the shipping product lives.&lt;/li&gt;
&lt;li&gt;When all stories on Staging have been accepted, PM should consider pushing that version of the code to Production.&lt;/li&gt;
&lt;li&gt;If users will have a bad experience due to known bugs or an incomplete user experience, then don&amp;rsquo;t push to Production.&lt;/li&gt;
&lt;li&gt;Push to Production has often as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Other Deploys&lt;/h2&gt;

&lt;p&gt;This list is by no means exhaustive. But small-to-medium-sized projects tend to have one or more of these deploys.&lt;/p&gt;

&lt;h3&gt;Patch Staging&lt;/h3&gt;

&lt;p&gt;A copy of Staging, meant as a short-lived deploy just to verify a hot-fix. Using a second Staging means mainline work doesn&amp;rsquo;t slow down while a patch is developed and shipped. Same rules as Staging apply, but tear this deploy down as soon as the fix is deployed to Production.&lt;/p&gt;

&lt;h3&gt;Demo&lt;/h3&gt;

&lt;p&gt;A copy of Staging, meant as a short-lived deploy for specific set of users for a short amount of time. Like a PatchGood use cases for a Demo deploy include demoing to potential investors and user research. Tear this deploy down as soon as the demo is over or when feedback is no longer required.&lt;/p&gt;

&lt;h3&gt;Integration/User Acceptance Test&lt;/h3&gt;

&lt;p&gt;A copy of Staging that can be used for more real-world testing. This usually stays in line with the normal Staging and is used for CI pipelines. Some examples are performance testing, smoke testing, and long user scenario testing.&lt;/p&gt;

&lt;h2&gt;Not Scary&lt;/h2&gt;

&lt;h3&gt;Continuous Delivery&lt;/h3&gt;

&lt;p&gt;What&amp;rsquo;s described above is Continuous Delivery; insist that code always move in one direction: towards Production. Also, set up the whole team so that it&amp;rsquo;s easier to move towards Production and release often.&lt;/p&gt;

&lt;h3&gt;Production Patches&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s how you should deal with hot-fixes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developers branch from the last Production deploy version.&lt;/li&gt;
&lt;li&gt;Developers fix the bug.&lt;/li&gt;
&lt;li&gt;CI runs against this version of the code to ensure no regressions.&lt;/li&gt;
&lt;li&gt;Developers deploy this version to a temporary Staging environment.&lt;/li&gt;
&lt;li&gt;PM accepts the fix.&lt;/li&gt;
&lt;li&gt;Developers push this branch to Production.&lt;/li&gt;
&lt;li&gt;Developers merge the fix back to master.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Sometimes Scary&lt;/h2&gt;

&lt;h3&gt;Continuous Deployment&lt;/h3&gt;

&lt;p&gt;Some teams are able to push &lt;em&gt;every&lt;/em&gt; green build to Production. I&amp;rsquo;m not going to cover this in this post. But there is additional process and code needed to support this.&lt;/p&gt;

&lt;h2&gt;Scary&lt;/h2&gt;

&lt;p&gt;These are the things you should truly worry about.&lt;/p&gt;

&lt;h3&gt;Long duration test suites&lt;/h3&gt;

&lt;p&gt;When your test suite or CI pipeline is too long, you run the risk of completing work faster than you can verify it. If you keep locally-run suites fast - say, under 10–20 minutes - then your developers can get features to staging multiple times a day. Long CI pipelines are less awful. For example, a web app can have a multi-stage pipeline that puts an all-browser compatibility suite near the end. Main development can continue based on success of unit tests, collaboration tests, and one browser stage of tests. Then the multi-browser suite can run once or twice a day, and browser-based problems from that stage can be bugs that get prioritized against other work.&lt;/p&gt;

&lt;h3&gt;Long-lived branches&lt;/h3&gt;

&lt;p&gt;Like long test suites, this can keep your feedback loops long. In this case you have bigger risks around the rest of your app changing faster than the branch&amp;rsquo;s work can keep up. If it&amp;rsquo;s taking too long to merge something back to master, then consider that the work should be broken up into smaller bits or should be started when its dependencies are more stable.&lt;/p&gt;

&lt;h3&gt;Complex merges&lt;/h3&gt;

&lt;p&gt;This usually comes from long-lived branches. Keeping all development on master helps to minimize this.&lt;/p&gt;

&lt;h3&gt;Manual deployment&lt;/h3&gt;

&lt;p&gt;&amp;hellip;either manual configurations and/or inconsistent deployments from Product &amp;amp; Staging. These are often related. You want Staging, Production, and any other deploys to have consistent configuration. Bugs due to different code interpreters, databases or OS libraries are very subtle and guaranteed time wasters. Invest in DevOps or a Platform-as-a-Service (PaaS) in order to keep your deploys consistent and repeatable.&lt;/p&gt;

&lt;h3&gt;Breaking the Stream&lt;/h3&gt;

&lt;p&gt;Code should always move towards Production. It increases the confidence in the code and keeps regressions low. When a fix is made downstream of development, then it&amp;rsquo;s harder than normal development to integrate that fix back in development.&lt;/p&gt;
</content>
  </entry>
</feed>
