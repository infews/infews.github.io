<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DWF’s Journal</title>
  <subtitle>A computer is just a BIG. PENCIL.</subtitle>
  <link href="https://dwf.bigpencil.net/feed.xml" rel="self"/>
  <link href="https://dwf.bigpencil.net/"/>
  <id>urn:uuid:b7b7a839-4395-4fd8-b897-9256f2f64957</id>
  <updated>2023-10-06T10:59:27-07:00</updated>
  <author>
    <name>Davis W. Frank</name>
  </author>
  <rights>© Davis W. Frank 2023</rights>
  <entry>
    <title>Balanced and Empowered</title>
    <link href="https://dwf.bigpencil.net/balanced-and-empowered/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">How we got RelEng back on course, and I kept my job.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;This article is a spiritual Part II to the post &lt;a href="https://dwf.bigpencil.net/team-is-the-agent-of-work/"&gt;The Team is the Agent of Work&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When I joined the PKS Release Engineering team, they had two dense tracks of work.&lt;/p&gt;

&lt;p&gt;Track One was developing all of the continuous integration pipelines and tooling that tested and packaged the PKS product. This was a &lt;em&gt;very&lt;/em&gt; complex system of nearly 500 &lt;a href="https://concourse-ci.org/"&gt;Concourse&lt;/a&gt; pipelines, running on 4 (eventually 5) cloud infrastructures, for 4 versions of the product, and between 3-8 different scenarios. These ran on every pull request that came from the PKS development teams.&lt;/p&gt;

&lt;p&gt;Track Two &lt;em&gt;operating&lt;/em&gt; all of those pipelines - updating pipelines as business needs changed, triaging failing builds, fixing any infrastructure causes, and notifying the dev teams when it was a legitimate product failure.&lt;/p&gt;

&lt;p&gt;This was hard.&lt;/p&gt;

&lt;p&gt;To make it easier, the team was building the system so a developer could run a subset of pipelines, locally, on one infrastructure. The hypothesis was that running green locally increased the chances that the run of the full pipeline set would be green and the PR was acceptable. It was a fine hypothesis.&lt;/p&gt;

&lt;p&gt;The complication came from the volume of RelEng feature work needed before that hypothesis could be validated. RelEng as a team was empowered to do this work for the PKS dev teams. But unvalidated hypotheses are the devil’s playthings.&lt;/p&gt;

&lt;p&gt;The stakeholders didn’t care about a grand set of tooling that might eventually make the developers’ job “easier.” They wanted to ship PKS to customers NOW. New features, new versions of Kubernetes, and bug fixes should be shipping frequently. RelEng wasn’t “moving fast enough” (read: as fast as they expected).&lt;/p&gt;

&lt;p&gt;Which is why &lt;a href="https://dwf.bigpencil.net/team-is-the-agent-of-work/"&gt;one of the VPs wanted to fire me&lt;/a&gt;. I was leading this team now. And I had a &lt;em&gt;very&lt;/em&gt; frustrated stakeholder.&lt;/p&gt;

&lt;h2&gt;Balance the Team&lt;/h2&gt;

&lt;p&gt;With the team being the agent of work, how do you set them up to deliver to stakeholders’ expectations?&lt;/p&gt;

&lt;p&gt;Empowered teams are impressive for the amount of work they can do while staying healthy. What is sometimes missing in &lt;a href="https://rjzaworski.com/2023/09/do-we-even-need-managers"&gt;the discussions of empowered team theory&lt;/a&gt;&lt;sup id="fnref:1" role="doc-noteref"&gt;&lt;a href="#fn:1" class="footnote" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; is how to keep the team focused on the correct work - the work that actually meets the stakeholders’ and customers’ needs and expectations - at the right time - executed in an efficient order. How do you keep everyone talking, the team productive, and prevent unnecessary work?&lt;/p&gt;

&lt;p&gt;One organizational approach for empowered teams is &lt;a href="https://tanzu.vmware.com/developer/learningpaths/application-development/balanced-teams/"&gt;Balanced Team&lt;/a&gt;. Very simply put this approach gives you three key roles:  Designers, Developers/Engineers, and Product Managers. Each comes with a set of modern practices. Designers bring User Centered Design, Developers bring XP (TDD, Pair Programming, Continuous Integration, etc.), and PMs bring Lean Product Development.&lt;/p&gt;

&lt;p&gt;Designers decide what’s &lt;em&gt;desirable&lt;/em&gt; to customers that solves their problem, Developers decide what’s &lt;em&gt;feasible&lt;/em&gt; to build, and Product Managers decide what is &lt;em&gt;viable&lt;/em&gt; for the business and stakeholders. The intersection of the three areas is where the team will build the most value. The interactions between the roles reinforce each other to keep the team in the value sweet spot.&lt;/p&gt;

&lt;p&gt;This sounds great. But how do you keep your stakeholders involved? By owning viability for the business, Product Managers are the conduit between the team and the stakeholders. They need to understand the business context well enough to help define stories and epics, especially story slicing and backlog prioritization. They need to understand design and engineering well enough to evaluate and compare the costs of potential solutions.&lt;/p&gt;

&lt;p&gt;And it’s not just a “build the backlog” role. They need to accept completed stories as a proxy for the customers and the stakeholders, rejecting work when it’s incomplete or bugs are found. They need to react  to changes in the business climate when things like budget or headcount changes or new competitors enter the market. PMs also need to reset stakeholder expectations when challenges like API limits, hosting costs, or new user insights present themselves.&lt;/p&gt;

&lt;p&gt;A strong Product Manager reduces the stress of stakeholders, enables designers to focus, and frees up developers to code.&lt;/p&gt;

&lt;h2&gt;Reset the Team&lt;/h2&gt;

&lt;p&gt;The VP (who, again, was the one who wanted to fire me) was telling us, very directly and indirectly, that we were &lt;em&gt;not&lt;/em&gt; meeting their needs and expectations. Our Empowered RelEng team was building what we &lt;em&gt;thought&lt;/em&gt; would make the whole org move faster. Instead, it was a big, complex solution with impact that was months away from paying off.&lt;/p&gt;

&lt;p&gt;I was acting in the balanced team’s role of Product Manager. I needed to reset the relationship with the VP, the dev teams, and the rest of the stakeholders. And I needed to do this in a way that would unlock the developers’ skills to tell us how we could start moving the entire org to higher productivity.&lt;/p&gt;

&lt;p&gt;First, we broke our existing system down into all of its steps - from pull request to published package - and timed them all. We listed all of the potential failure cases along the way. We put it all on a public whiteboard and shared it with the entire org.&lt;/p&gt;

&lt;p&gt;With some introspection, we saw that we were focusing on building an ideal toolset for the PKS dev teams - Track One. Track Two had us mostly focusing on frequent flaky tests running in the pipelines. The former was something that nobody asked for. The latter was wasting time and effort, because at the end of the day RelEng had very little control over making the tests more reliable.&lt;/p&gt;

&lt;h2&gt;Point at the Summit&lt;/h2&gt;

&lt;p&gt;We held a &lt;a href="https://userstorymap.io/mountain-climber-retrospective-template/"&gt;mountain climber retrospective&lt;/a&gt; and put the goal at the top of the mountain of “1 pull request per day per version.” We listed our “boulders” - all of the bottlenecks from the whiteboard. We talked about making better “ropes” - code we could write that would get us to the top more reliably and faster. We spotted some “First Aid kits” - places where some additional help from other teams would make us stronger.&lt;/p&gt;

&lt;p&gt;With the new focus, we prioritized smaller efforts that shrank the feedback loops for every pull request. We did work in the pipelines themselves. We found the easy wins improving RelEng’s code and tooling that removed, or heavily reduced the cost of managing, failure cases.&lt;/p&gt;

&lt;p&gt;Some highlights&lt;sup id="fnref:2" role="doc-noteref"&gt;&lt;a href="#fn:2" class="footnote" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parallelized our pipelines such that a 35 hour pipeline run shrunk to 7 hours&lt;/li&gt;
  &lt;li&gt;Built our pipelines from smaller, well-abstracted YAML files, reducing manual errors during pipeline operation to zero&lt;/li&gt;
  &lt;li&gt;Moved our public cloud resource management to well-factored Terraform, eliminating errors during cloud creation &amp;amp; deletion (this happened hundreds of times a day)&lt;/li&gt;
  &lt;li&gt;Worked with an internal team to right-size our private cloud resources, reducing errors due to lack of server availability&lt;/li&gt;
  &lt;li&gt;Deleted code that generated some product configuration YAML, replacing it with editable YAML files, reducing errors during our final packaging&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We updated the public whiteboard frequently and improved org-wide communication on our results. We got &lt;em&gt;very&lt;/em&gt; close to 1 PR per day.&lt;/p&gt;

&lt;p&gt;Oh, and I kept my job.&lt;/p&gt;

&lt;p&gt;Our empowered team became a balanced team. We treated Release Engineering as a &lt;em&gt;product&lt;/em&gt;. We interviewed our users - the PKS developers. We met more often with our stakeholders. We focused on what we &lt;em&gt;needed&lt;/em&gt; to build instead of what we &lt;em&gt;wanted&lt;/em&gt; to build.&lt;/p&gt;

&lt;p&gt;We solved problems. We shipped. And people - customers, stakeholders, and the RelEng team - got happier.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1" role="doc-endnote"&gt;
      &lt;p&gt;Shoutout to RJ Zaworski for this take on Empowered Teams. And extra points for the hot-take-title. &lt;a href="#fnref:1" class="reversefootnote" role="doc-backlink"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2" role="doc-endnote"&gt;
      &lt;p&gt;For more technical details of some of this work, see &lt;a href="https://dwf.bigpencil.net/releng-beer-talk/"&gt;Three Cheers for Release Engineering&lt;/a&gt;. &lt;a href="#fnref:2" class="reversefootnote" role="doc-backlink"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2023-10-04T17:00:00-07:00</published>
    <updated>2023-10-06T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>The Team is the Agent of Work</title>
    <link href="https://dwf.bigpencil.net/team-is-the-agent-of-work/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">That time that somebody wanted me fired.</summary>
    <content type="html">
&lt;p&gt;Once, a VP walked into my boss’s office and said that I needed to be fired.&lt;/p&gt;

&lt;p&gt;I had been on the team for about four months. The first few months I was an engineer on the team. Then I had moved into the role of Product Manager - in the &lt;a href="https://tanzu.vmware.com/developer/learningpaths/application-development/balanced-teams/"&gt;Balanced Team/Pivotal&lt;/a&gt; sense, defining and prioritizing the outcomes for the team of 3-to-4 pairs of engineers.&lt;/p&gt;

&lt;p&gt;This was a Release Engineering Team and we weren’t releasing  incremental builds to the rest of the organization very fast or efficiently. We were finding problems and fixing them, and thus increasing our frequency of output. But we had a &lt;em&gt;long&lt;/em&gt; way to go.&lt;/p&gt;

&lt;p&gt;But for some in the org management chain, we weren’t moving nearly fast enough. And since I was nominally “in charge,” they decided that &lt;em&gt;I&lt;/em&gt; was the problem. Replacing me was the essential course of action.&lt;/p&gt;

&lt;h1&gt;Finding Accountability&lt;/h1&gt;

&lt;p&gt;Release Engineering for PKS was an intentional specialization, abstracting away the complexity of Kubernetes, 5 different cloud infrastructures, and multiple interdependent products from related teams. The team was building all the tooling to run a very complex set of continuous integration pipelines for 4 versions of the product simultaneously.&lt;/p&gt;

&lt;p&gt;The org had over 30 engineers and multiple downstream teams who needed CI to be green and an installable product package in order to get their jobs done. RelEng needed to be smooth and efficient and we weren’t there yet.&lt;/p&gt;

&lt;p&gt;The VP had &lt;em&gt;very&lt;/em&gt; different expectations about how long CI and packaging should take. Since I couldn’t meet these expectations after four weeks leading, I needed to be held accountable. Removing me was necessary to make the team more productive.&lt;/p&gt;

&lt;p&gt;Somehow.&lt;/p&gt;

&lt;p&gt;Looking back, this would have been like a Major League Baseball team replacing its manager in the middle of a losing season and then expecting a World Series win come October.&lt;/p&gt;

&lt;h1&gt;Keeping the Black Box Open&lt;/h1&gt;

&lt;p&gt;Andy Grove &lt;a href="https://a.co/d/7wMVxHz"&gt;valued middle management&lt;/a&gt; because they could cut a hole in the (black) box that is a system to find out a team’s problems, then drive them to fix those problems. John Cutler has talked about what happens &lt;a href="https://cutlefish.substack.com/p/tbm-224-the-black-box"&gt;when you stop looking inside the box&lt;/a&gt; - you return to status-report-driven drudgery without improvements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/testobsessed/"&gt;Elisabeth Hendrickson&lt;/a&gt; taught me about a model of management that’s builds well on top of these ideas - that &lt;em&gt;the team is the agent of work&lt;/em&gt;. They do the work. They own the desired outcomes. Together. No single person, and certainly not the manager, is essential to team success. The team succeeds and fails together.&lt;/p&gt;

&lt;p&gt;If a team is struggling, if they are not meeting expectations, a manager should ask them why. A &lt;em&gt;lot&lt;/em&gt;. The team has the most context about what is happening and why. They know where their dependencies are. They know what work they are doing or not able to do. The manager’s job is to ask, listen, understand, and then use their own context and experience to enable the team to improve.&lt;/p&gt;

&lt;p&gt;Because it’s the team doing the work.&lt;/p&gt;

&lt;h1&gt;Flashlight Time&lt;/h1&gt;

&lt;p&gt;Back to the story.&lt;/p&gt;

&lt;p&gt;My boss asked me a boatload of questions about what was &lt;em&gt;really&lt;/em&gt; going on. Then she pulled some organizational aikido and had me lead a series of meetings with the VP and other team leaders where I reviewed, in excruciating detail, the entire Release Engineering pipeline. We talked about code and dependencies. I showed average timings of each step over the past few weeks. I talked about the causes of our top five bottlenecks and what our roadmap was to fix them. I also pointed out where other parts of the org could help RelEng go even faster.&lt;/p&gt;

&lt;p&gt;I kept the job. The team kept moving. We even got a bit more support from the rest of the organization. And &lt;a href="https://dwf.bigpencil.net/releng-beer-talk/"&gt;we did get faster&lt;/a&gt; over the coming months.&lt;/p&gt;

&lt;p&gt;(It’s worth noting I didn’t hear about the whole firing thing from this manager until a year or two later. Great managers know how to get the most out of a team.)&lt;/p&gt;

&lt;h1&gt;Save the Team, Save the Outcomes&lt;/h1&gt;

&lt;p&gt;So when a team is struggling, if it seems sudden or perennial, the solution is almost never to replace the manager.&lt;/p&gt;

&lt;p&gt;If you want to help as a leader, remember that building software is a system like any other. Dig into the context with the team. Ask why enough times until you understand what is preventing the outcomes you and the organization expect.&lt;/p&gt;

&lt;p&gt;Then use your experience and influence to increase the team’s chances of success. Remove obstacles. Change goals. Find other black boxes, cut more holes, and shine more lights. And if you have data that tells you to, make staff changes.&lt;/p&gt;

&lt;p&gt;But remember that a new manager isn’t going to win you the World Series. Just ask New York Yankees fans about Billy Martin.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;team&lt;/em&gt; is the agent of work.&lt;/p&gt;

</content>
    <published>2023-09-18T15:11:00-07:00</published>
    <updated>2023-10-06T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Improved 1-1 Note Taking</title>
    <link href="https://dwf.bigpencil.net/improved-1-1-note-taking/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">In which I adapt some of my note taking to Notion.</summary>
    <content type="html">
&lt;p&gt;I spent the better part of 18 months getting really good at using &lt;a href="https://obsidian.md"&gt;Obsidian&lt;/a&gt;. Enough that I wrote a &lt;a href="https://dwf.bigpencil.net/series/obsidian/"&gt;whole blog series about it&lt;/a&gt;! Daily Journaling, general knowledge dumping, and longer-form writing became very natural.&lt;/p&gt;

&lt;p&gt;The job I started after those months of Markdown-ing-more-than-ever-before was remote-first. I was ready to use my new-ish note taking superpowers in another context.&lt;/p&gt;

&lt;p&gt;I set up my home office with two screens. I had a 27” monitor full of browser tabs where I did a bunch of Zooming, Looming, and a little coding. And I  had my employer’s laptop with Obsidian maximized so I could take notes as I did all the work. Things started well.&lt;/p&gt;

&lt;p&gt;But a few months into the job, Obsidian and I started having problems. Smooth writing became clunky. What happened?&lt;/p&gt;

&lt;p&gt;It turns out that in a job on a team of other people, collaborative writing is a thing. Duh.&lt;/p&gt;

&lt;p&gt;I started any document in Obsidian as always, but when I was ready to get comments or work with others on a shared doc, I moved text over to Google Docs, or later when our team started using it more, to &lt;a href="https://notion.so"&gt;Notion&lt;/a&gt;. I needed comments and co-writing, so this made sense.&lt;/p&gt;

&lt;p&gt;I learned to delete an Obsidian draft and move it to Notion sooner. I even got better at &lt;em&gt;starting&lt;/em&gt; a doc in Notion, preferring to work, write, and think more in the open. But there was still a case where my Obsidian patterns weren’t working: 1-1’s.&lt;/p&gt;

&lt;h2&gt;1-1 Notes as a Collaborative Document&lt;/h2&gt;

&lt;p&gt;As part of my Obsidian series, I wrote about &lt;a href="https://dwf.bigpencil.net/one-on-one-notes/"&gt;how I tracked 1-1’s&lt;/a&gt;. I was pretty happy with how this worked. I kept action items. I linked individual notes into the Daily Journal. It really worked for me most of the time.&lt;/p&gt;

&lt;p&gt;However, it turns out that 1-1’s are an opportunity for collaboration. Duh, again. The whole point of 1-1 meetings, especially between a manager and a report, is to work through issues, career plans, and meta concerns &lt;em&gt;together&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An Obsidian vault is not easily a place for “together.”&lt;/p&gt;

&lt;h2&gt;A Notion of a Solution&lt;/h2&gt;

&lt;p&gt;I spent a few weeks iterating using Notion for 1-1’s with the other people involved (one at a time). Notion turned out to be fantastic place to experiment with meeting these needs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keeping all of my 1-1’s well organized, making it easy to find the next meeting with a person&lt;/li&gt;
  &lt;li&gt;Allow for different meeting templates per person&lt;/li&gt;
  &lt;li&gt;Easy to create a new regular 1-1; my staff changed occasionally, so adding/removing meetings was useful&lt;/li&gt;
  &lt;li&gt;Keeping track of action items the two people were creating and managing in each meeting&lt;/li&gt;
  &lt;li&gt;Keeping the 1-1 notes and action items just for the two people to collaborate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got to a pretty robust solution. Enough that I’ve productized it!&lt;/p&gt;

&lt;p&gt;So if you are someone who:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uses Notion as your knowledge base&lt;/li&gt;
  &lt;li&gt;Has several regular 1-1 meetings with others in the same Notion instance&lt;/li&gt;
  &lt;li&gt;Have had challenges keeping the notes and action items from these meetings organized&lt;/li&gt;
  &lt;li&gt;Like, or are intrigued by, the idea of 1-1 content being the result of collaborative editing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then please have a look at my &lt;a href="https://bigpencilapp.gumroad.com/l/zfortz"&gt;1-1 Tracker&lt;/a&gt; (purchase link at &lt;a href="https://gumroad.com"&gt;Gumroad&lt;/a&gt;). And if you like what you see, you can buy it. And if it works well for you, you can rate it.&lt;/p&gt;

&lt;p&gt;I hope this helps you. Five Stars. Will take notes again.&lt;/p&gt;
</content>
    <published>2023-09-13T10:54:00-07:00</published>
  </entry>
  <entry>
    <title>Three Cheers for Release Engineering</title>
    <link href="https://dwf.bigpencil.net/releng-beer-talk/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Using beer brewing to talk about Release Engineering and software complexity.</summary>
    <content type="html">
&lt;p&gt;The first time I was on a modern Release Engineering team, I was skeptical. I had worked with, and managed, “build” or “installer” teams. They often felt slow - a relic of the years of shrink-wrapped software. Why did we need them for a web-downloadable or web-deployable product?&lt;/p&gt;

&lt;p&gt;I understood right away. Even web software could reach a level of complexity where additional engineering &lt;em&gt;just to release&lt;/em&gt; was necessary. I wanted to share my realizations with everyone!&lt;/p&gt;

&lt;p&gt;The analogy of beer brewing hit me one afternoon and this talk came together. The first versions included the pun of Release Engi-beer-ing. But like most puns, that didn’t last long. I’ve given versions of this a few times for internal audiences at Pivotal, and then at Fountain. But this is the first time I’ve shared this publicly.&lt;/p&gt;

&lt;p&gt;Come for the analogy, stay for the war stories and insights.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/ih2JHXBb8tY"&gt;Three Cheers for Release Engineering&lt;/a&gt;&lt;/p&gt;
</content>
    <published>2023-08-14T07:16:00-07:00</published>
  </entry>
  <entry>
    <title>Curiosity and Impatience</title>
    <link href="https://dwf.bigpencil.net/curiousity-and-impatience/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Two under-valued behaviors that accelerate a team.</summary>
    <content type="html">
&lt;p&gt;Some years ago, during a particularly complex client engagement, we got thrown a curveball. The team was about 10 developers, cranking on a greenfield project. We were a few months in and despite a rocky start, were feeling pretty productive. CI stayed green, we had code in Production, and we were iterating quickly. Then came a random stakeholder request.&lt;/p&gt;

&lt;p&gt;The client wanted us to build an upcoming feature set on top of their research teams’ experimental APIs. We were building a Ruby on Rails app, deployed on Linux. This API was a collection of Windows DLL’s, running on a PC in a lab, in the client’s office, in another state.&lt;/p&gt;

&lt;p&gt;Did we make it work? Totally. It’s just software.&lt;/p&gt;

&lt;p&gt;It was a bit of a slog. We had to set up tunnels between our cloud deployments and that office. We stalled for days at a time while we waited on the client’s IT team to get to our configuration request tickets. We got there. But it was not fun. Or reliable.&lt;/p&gt;

&lt;p&gt;The tunnels were flaky, dying often. The client’s IT team rotated IP addresses on an unknowable schedule. This would cause CI to fail. Or even worse, cause demos for the client to crash. At least once we had to find someone to go reboot the Windows box. Not. Fun.&lt;/p&gt;

&lt;p&gt;After a few weeks of this, we added some lightweight observability alarms. We invested in some scripts to restart tunnels and update some config files. These were bandages to make things somewhat manageable so we could continue development.&lt;/p&gt;

&lt;p&gt;But our morale, productivity, and credibility all took a hit every time this service went down. It was a tax, slowing down work the team was doing. But we lived with it in service of doing new work.&lt;/p&gt;

&lt;p&gt;Empathy is a hot topic these days - and for good reason. Software is made of people. Even when we are remote-first and heavily asynchronous, we still have to work &lt;em&gt;together&lt;/em&gt; to build software products. Empathy is key to that. Nat Bennett &lt;a href="https://www.simplermachines.com/notes-on-the-pivotal-interview-process/"&gt;wrote about screening for empathy&lt;/a&gt; in Pivotal’s hiring process and tied it to one of Pivotal’s values - “Be Kind”.&lt;/p&gt;

&lt;p&gt;Pivotal had two other values: “Do the Right Thing” and “Do What Works.” Over time I’ve realized that a good way to practice these values is to be &lt;em&gt;curious&lt;/em&gt; and &lt;em&gt;impatient&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A productive team is impatient. They pay attention to anything that feels awkward, slow, or inefficient. It could be production code, a CI that is flaky, a manual task list for every deploy, or that Finance keeps complaining about your infrastructure bill. These are taxes on your team’s productivity.&lt;/p&gt;

&lt;p&gt;It’s not enough to notice, or worse, to complain that these are slowing you down. You need to be curious enough to find out &lt;em&gt;why&lt;/em&gt; the tax exists. And then you need to find an alternate way to achieve the same outcome - only with less distraction and more efficiency.&lt;/p&gt;

&lt;p&gt;This is work like any other the team does. The team needs to plan and manage it against other priorities. But it’s work that you need to do. And it can be just as important as new feature work.&lt;/p&gt;

&lt;p&gt;John Cutler mentioned this in his newsletter post &lt;em&gt;&lt;a href="https://cutlefish.substack.com/p/tbm-4952-your-calendar-your-priorities"&gt;Your Calendar = Your Priorities&lt;/a&gt;&lt;/em&gt;. There is value in doing the work that improves your efficiency - what John calls “managing complexity.” If you ignore these issues, they inflate and turn into long, expensive interrupts. That work becomes an even &lt;em&gt;bigger&lt;/em&gt; drag on your team.&lt;/p&gt;

&lt;p&gt;Back to the project. The issues of this Windows machine spilled over at a retrospective a couple of weeks later. Nobody was happy with our solutions we’d tried so far or the impact it was having on the team. Time to find a better way.&lt;/p&gt;

&lt;p&gt;We gave a pair of developers a couple of weeks to dig deep into the problem space and experiment. It wasn’t easy, but they found a way. They negotiated for admin rights to the vSphere instance that was managing all our VMs for our Rails app. They scripted vSphere (using a Ruby gem) to provision Windows VMs. They automated deploying the latest version of the DLLs to those VMs and then connected them to our Linux Rails deployment. They test drove this work and integrated it into our CI and deployment scripts. After this investment, the Windows code never caused CI to fail, or a Production demo to crash, ever again.&lt;/p&gt;

&lt;p&gt;It’s hard to map curiosity and impatience directly to the values of “Do the Right Thing” and “Do What Works.” When teams acted according to these values, they fixed small problems early and stayed productive. They stayed productive by making themselves even more productive.&lt;/p&gt;

&lt;p&gt;Pay attention to your slow tests. Or flaky tests. Don’t waste your infrastructure. Keep your dependencies up-to-date.&lt;/p&gt;

&lt;p&gt;Do the Right Thing. Do What Works.&lt;/p&gt;

&lt;p&gt;Stay impatient. Stay curious.&lt;/p&gt;
</content>
    <published>2023-07-17T17:00:00-07:00</published>
    <updated>2023-07-22T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>A Little More Yak Trimming</title>
    <link href="https://dwf.bigpencil.net/more-blog-yakking/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">I did a couple more small things.</summary>
    <content type="html">
&lt;p&gt;I continued to trim around the ears of this blog since last week. And a few things stood out that I felt worth sharing.&lt;/p&gt;

&lt;h2&gt;CSS Factoring&lt;/h2&gt;

&lt;p&gt;CSS, in this case SCSS, is source code worth factoring just like any other code. Now that I’d trimmed the stylesheets significantly, I felt it worth organizing them better for later maintenance. Maybe I won’t feel the need to throw out and start over in another year!&lt;/p&gt;

&lt;p&gt;I’m using Google Fonts here. While I was pretty happy with the indirection of SASS variables for font family, I did go a little further and have variables for color and weight. Then I pulled out a fonts-only file. While I stopped short of writing a function that generated the Google Fonts URL, I still can change all font attributes in one place if I choose. That’s a fine win.&lt;/p&gt;

&lt;p&gt;I also made sure all my font units were in &lt;code&gt;rem&lt;/code&gt;, making it easier to scale things for mobile as I tweak sizes over time when fonts change.&lt;/p&gt;

&lt;p&gt;I pulled out other sections, roughly mapped to the different types of pages, each into their own files. And I put special media queries at the bottom of each file. But I do have 1 key complex media query for portrait phones in its own file. The longest file is 85 lines. My final css file is only imports.&lt;/p&gt;

&lt;h2&gt;Better Syntax Highlighting&lt;/h2&gt;

&lt;p&gt;Lastly, due to my &lt;a href="/series/obsidian"&gt;Obsidian&lt;/a&gt; series, there are a lot of code blocks that are just Markdown. I wasn’t happy with how simply &lt;a href="https://github.com/rouge-ruby/rouge"&gt;Rouge&lt;/a&gt; (and thus &lt;a href="https://pygments.org/"&gt;Pygments&lt;/a&gt;) supported Markdown - the tagging is simpler than I’d like. &lt;a href="https://kramdown.gettalong.org/"&gt;Kramdown&lt;/a&gt; supports Rouge and [Coderay][c]. But I wanted a converter that had more granularity for MD.&lt;/p&gt;

&lt;p&gt;I converted to using &lt;a href="https://prismjs.com/"&gt;Prism&lt;/a&gt;, which highlights &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks with JavaScript. This required:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Downloading a Prism bundle that included the language support I expect&lt;/li&gt;
  &lt;li&gt;Finding and tweaking a Prism theme&lt;/li&gt;
  &lt;li&gt;Adding these to the repo&lt;/li&gt;
  &lt;li&gt;Adding these to the layout files&lt;/li&gt;
  &lt;li&gt;Turning off syntax highlighting for &lt;a href="https://kramdown.gettalong.org/"&gt;Kramdown&lt;/a&gt; with a well-placed &lt;code&gt;nil&lt;/code&gt; in Middleman’s &lt;code&gt;config.rb&lt;/code&gt; like so:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-ruby"&gt;set :markdown_engine, :kramdown
set :markdown,
    auto_ids: false,
    input: "GFM",            # GH emoji + ``` code blocks
    layout_engine: :haml,
    tables: true,
    autolink: true,
    smartypants: true,
    fenced_code_blocks: true,
    syntax_highlighter: nil  # turns off Rouge so we can use PrismJS
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While Kramdown won’t parse the contents of the &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; block, it does set a CSS class on it (and the parent &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag) based on the language. Prism uses that class when converting to HTML for coloring.&lt;/p&gt;

&lt;p&gt;That’s enough blog yak shaving for a while. Back to writing…&lt;/p&gt;
</content>
    <published>2023-07-15T14:45:00-07:00</published>
    <updated>2023-07-16T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Anchor's Away</title>
    <link href="https://dwf.bigpencil.net/anchors-away/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Saying goodbye to Anchor Brewing</summary>
    <content type="html">
&lt;p&gt;I spent the summer of 1990 in Europe, mostly in Leicester, England, taking classes at what is now &lt;a href="https://www.dmu.ac.uk/home.aspx"&gt;DeMontfort University&lt;/a&gt;. That meant a summer drinking a lot of beer - English beer, mostly Leicester’s &lt;a href="https://www.everards.co.uk/our-beers/old-original/"&gt;Everard’s Old Original&lt;/a&gt; because, hey, Drink Local!&lt;/p&gt;

&lt;p&gt;I was dreading heading back to Athens, GA, and being stuck with the beer choices we had. The microbrew revolution - thanks, &lt;a href="https://content.kegworks.com/blog/how-jimmy-carter-sparked-the-craft-beer-revolution"&gt;President Carter&lt;/a&gt;! - ironically hadn’t made it to Georgia just yet. Which meant my beer choices were slim. So slim that were were happy with Killian’s Irish Red and ecstatic with the occasional splurge on Samuel Smith’s 4-packs.&lt;/p&gt;

&lt;p&gt;Home was inevitable, so off to Gatwick and the standard US beer aisles. I had a minor surprise on the flight back to Atlanta. We were shown an episode of Michael Jackson’s The Beer Hunter. It featured &lt;a href="https://thetvdb.com/series/the-beer-hunter/episodes/345791"&gt;Fritz Maytag and Anchor Brewing&lt;/a&gt;. I learned the term “microbrew” and that Anchor Steam had wide distribution. Maybe I had hope for hops!&lt;/p&gt;

&lt;p&gt;This is how Anchor Steam became my favorite beer. It was pretty easy to get. It was less expensive than Sam Smith’s. It was &lt;em&gt;exotic&lt;/em&gt; because it came from California. I was an oddball asking for it.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://www.lawlersliquorsonline.com/wp-content/uploads/2018/09/Steam_6Pack_Label_042715-600.png" alt="Anchor Steam beer bottle label" /&gt;&lt;br /&gt;
&lt;em&gt;The Anchor Steam beer label up until the rebrand of 2021.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A classmate had a t-shirt of this (now) “old” label. I tried to buy, con, but never quite managed to steal that shirt from him. It took until 1995, on the one time I made it to the brewery, for me to get my own shirt. And I wore it to threads a few years ago.&lt;/p&gt;

&lt;p&gt;I’ve fondly enjoyed just about every Anchor style - Liberty Pale Ale just never worked for me. The California Lager was really nice in the summer. Especially after they stopped brewing Anchor Wheat, after the rebranding of it to Anchor Summer. I still have a magnum of the 2019 Anchor Christmas Ale and a six-pack of Christmas 2021. Wow those are good. I’ll save them even longer now - they keep and age well.&lt;/p&gt;

&lt;p&gt;Even as I moved to the west coast in 1993, and the number of beer options became anxiety-inducing, I still had Anchor fairly often.&lt;/p&gt;

&lt;p&gt;When I had season tickets to the San Francisco Giants, there was an Anchor Steam tap at the top of my aisle. It was my first stop at a game for ~20 years. I called it the freshest beer in the stadium since it was brewed a mile-and-a-half away. I even imagined pipes running from 3rd &amp;amp; King down to the vats in Potrero Hill.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.mlb.com/giants/news/anchor-brewing-joins-san-francisco-giants-in-mission-rock-development-project/c-41796786"&gt;brewpub across from Oracle Park&lt;/a&gt; never materialized. Yet another project where the developer and the City of SF couldn’t get aligned. It &lt;a href="https://sfist.com/2017/08/03/anchor_brewery_was_sold_to_sapporo/"&gt;died when Sapporo bought Anchor&lt;/a&gt;. It would have been amazing.&lt;/p&gt;

&lt;p&gt;They opened the &lt;a href="https://www.yelp.com/biz/anchor-public-taps-san-francisco-2?osq=anchor+public+taps"&gt;Anchor Public Taps&lt;/a&gt; instead, and during the COVID semi-lockdown, we drove up for crowlers-only brews a couple of times. Those always felt special.&lt;/p&gt;

&lt;p&gt;I woke up today to &lt;a href="https://www.sfgate.com/food/article/anchor-brewing-company-ceasing-operations-18196509.php"&gt;the news of Anchor Brewing ceasing operations&lt;/a&gt;. I’m sure the facilities and the brand are worth something. Maybe Anchor just needs to be &lt;a href="https://www.sfchronicle.com/oursf/article/anchor-steam-comeback-story-18194861.php"&gt;saved one more time&lt;/a&gt;. After all, &lt;em&gt;beer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I’m probably part of the problem. But not today. So off to the grocery for one last run for some Steam.&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/steam6-8d6e4415.jpg" alt="Last Six Pack" /&gt;&lt;br /&gt;
&lt;em&gt;The last six of Anchor Steam at my grocery, 2023 July 12&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It was a misfit six-pack, the cardboard handle torn. It felt fitting that in the weight of this moment - the last Anchor Steam at this store - the cashier had to scan the barcode by lifting it with both hands.&lt;/p&gt;

&lt;p&gt;If this is the end, Anchor, so long and thanks for all the beer.&lt;/p&gt;

&lt;h2&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;For more escapades from that summer see &lt;a href="/goodbye-chris-cornell/"&gt;Goodbye Chris Cornell&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The SF Chronicle has &lt;a href="https://www.sfchronicle.com/food/wine/article/anchor-steam-18192913.php"&gt;another article about Anchor’s closing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The judges also would have accepted the title of “Anchor Finally on the Fritz”.&lt;/li&gt;
&lt;/ul&gt;
</content>
    <published>2023-07-12T14:51:00-07:00</published>
    <updated>2023-07-17T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Shaving The Blog Yak</title>
    <link href="https://dwf.bigpencil.net/shaving-the-blog-yak/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">All the details about the update and clean up this blog's code.</summary>
    <content type="html">
&lt;p&gt;I thought some would be interested in my blog “refresh” story. It’s got several yaks that needed everything from a light trim to a buzz-cut/rogaine special.  Like any good technical project rathole, I started with a dependency update…&lt;/p&gt;

&lt;p&gt;This roughly 3-year-old site is a static site built with &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt; because I prefer Ruby, HAML, and Markdown. I wrote a few helpers, including a moderately interesting one for &lt;a href="https://json-ld.org/"&gt;json+ld&lt;/a&gt;. I knew I wanted to do some restyling eventually. I needed to do a &lt;code&gt;bundle update&lt;/code&gt; and to see what needed to change in the “guts” before getting to the markup/CSS.&lt;/p&gt;

&lt;p&gt;Middleman updated to 4.5, HAML to 6.x, and I moved to Ruby 3.2.2. I then ran into a couple of intertwined problems with plugins and HAML. That led me to reconsider Middleman.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bridgetownrb.com/"&gt;Bridgetown&lt;/a&gt; was the obvious next stop. But after a week of wrestling with its HAML support, I gave up. It wasn’t hard to migrate the content, but without full support of HAML components, I was building lots shim Liquid templates to keep most partials in HAML. It felt exactly like the type of work I would want to rip out later. It made more sense to me to stay with Middleman and fix the issues I’d found.&lt;/p&gt;

&lt;p&gt;The dependency problems were with two plug-ins. I was using &lt;a href="https://github.com/AndrewKvalheim/middleman-vcs-time"&gt;middleman-vcs-time&lt;/a&gt; for getting published times for feeds and json+ld. That plug-in has been archived, so I moved to &lt;code&gt;File.mtime&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;Next was &lt;a href="https://github.com/middleman/middleman-syntax"&gt;middleman-syntax&lt;/a&gt; which has some problems with HAML 6. Without a fix, I deferred this and jumped ahead.&lt;/p&gt;

&lt;p&gt;I had to make two changes for HAML 6 - &lt;code&gt;succeed&lt;/code&gt; (thankfully) is gone, so I moved to string concatenation. I had a couple of places where I needed unescaped strings (thanks &lt;code&gt;!=&lt;/code&gt; !) (see again, &lt;a href="https://json-ld.org/"&gt;json+ld&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I knew I wanted to clean up my HTML to ASAP - As Semantic As Practical - so I did some research into classless CSS resets and settled on &lt;a href="https://holidaycss.js.org/"&gt;Holiday&lt;/a&gt;. It has some very nice, sensible defaults, making the kinds of changes I wanted to make clean and simple. This let me kill all of my old CSS, including my &lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt; version-4-era self hosting, instead moving to their JS-based hosted free solution.&lt;/p&gt;

&lt;p&gt;Next up was a bunch of cleanup of layouts, HTML, and thus CSS. I had a few design changes I wanted to make that drove this. This was a lot of iterative tweaking, but I think my layouts and component partials are better factored than before. More deleted files!&lt;/p&gt;

&lt;p&gt;During the restyling, I found that even with Safari’s Responsive Developer Mode, the media queries aren’t &lt;em&gt;quite&lt;/em&gt; right. This meant having the iPhone and iPad around with a cable for working the Console from my desktop for element inspection. You have to install the full Xcode to do this, but it is worth it.&lt;/p&gt;

&lt;p&gt;All that done, I took a look at how I was customizing and configuring Middleman. I changed how I store and build my blog series (a custom collection). I do want these presented a little differently, and I had over-complicated them before. Now the series introduction page\s are just in Markdown, like other articles/posts, and share a simple HAML template.&lt;/p&gt;

&lt;p&gt;Next up - the motivator for all of this work - was tweaking my resume. Before my resume was in HAML. I wanted to move this to (nearly) 100% Markdown to make maintenance easier. And I got there by making a custom HAML layout, which allowed me to move the social links (using Font Awesome) from HTML-in-Markdown to HAML.&lt;/p&gt;

&lt;p&gt;I was using RedCarpet for Markdown-to-HTML because it’s what &lt;code&gt;middleman-syntax&lt;/code&gt; recommended. RedCarpet doesn’t support extended Markdown for HTML Definition Lists, which I use in my resume. Back to Kramdown (the Middleman default) for &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;’s, installing [kramdown-parser-gfm][gfm] so I didn’t have to convert all my syntax-highlighting in articles to &lt;code&gt;~~~&lt;/code&gt; (and change my brain), and finding a Pygments CSS file I liked. All pretty easy, but I’m still not thrilled with how the syntax highlighting looks for Markdown, so I may be revisiting this later.&lt;/p&gt;

&lt;p&gt;I version my resume with dates - this helps me personally and when talking with recruiters. Today this is manual and I wanted to make it automatic. Back to the resume HAML layout, where I added a line to shell out and get the last git commit date of the resume Markdown file with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git log -n 1 --pretty=format:%cs -- FILENAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then I added a step to my &lt;code&gt;rake&lt;/code&gt;-based build and publish that fails if there are uncommitted files. I should’ve done that ages ago.&lt;/p&gt;

&lt;p&gt;After all this work, I’m pretty happy with the result. I learned a bit. Solved some puzzles. Cleaned up some redundancy and poor factoring.&lt;/p&gt;

&lt;p&gt;I still have a handful of small things to do that I’ll work on as snacks here and there. A dark mode for CSS, fixing the most-recent-update date on articles using the git commit, some helper refactoring…&lt;/p&gt;

&lt;p&gt;Was this yak shaving? Absolutely. Was it fun? Also absolutely.&lt;/p&gt;
</content>
    <published>2023-07-11T09:43:00-07:00</published>
  </entry>
  <entry>
    <title>GoGaRuCo 2013 Storytime</title>
    <link href="https://dwf.bigpencil.net/gogaruco-2013-storytime/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">A video from deep in the archives</summary>
    <content type="html">
&lt;p&gt;Way back in 2013 I got a last minute request from &lt;a href="https://ruby.social/@sarahmei"&gt;Sarah Mei&lt;/a&gt; for a 10 minute talk during the Golden Gate Ruby Conference’s “Story time.” IIRC, it was meant to be a “break time” talk. Something light and fun so that the attendee’s brains could catch up a bit between deep technical sessions.&lt;/p&gt;

&lt;p&gt;I knew exactly which stories I wanted to pull together. And it was a lot of fun to give.&lt;/p&gt;

&lt;p&gt;I had mostly forgotten about this talk and totally forgotten that it was recorded. So imagine my surprise when I &lt;br /&gt;
uncovered the video this week. And that it had 200+ views!&lt;/p&gt;

&lt;p&gt;If you’re curious, or you were there and want the 10-year flashback, or maybe just want a ten-minute break today, here it is. I hope you enjoy it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ueeZKPGNk6I"&gt;GoGaRuCo 2013 - Afternoon Storytime - How I test-drove my Career&lt;/a&gt; (YouTube)&lt;/p&gt;

</content>
    <published>2023-06-28T08:09:00-07:00</published>
    <updated>2023-08-14T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>3X but It's People</title>
    <link href="https://dwf.bigpencil.net/3x-but-it-s-people/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">How I think about people when I think about 3X.</summary>
    <content type="html">
&lt;p&gt;Kent Beck’s “3X” model is an interesting way to think about software work over the life of a product. Read the &lt;a href="https://medium.com/@kentbeck_7670/the-product-development-triathlon-6464e2763c46"&gt;article&lt;/a&gt; and watch this &lt;a href="https://www.youtube.com/watch?v=YGhS8VQpS6s"&gt;video&lt;/a&gt; for a catch-up.&lt;/p&gt;

&lt;p&gt;My high-level paraphrasing is that every “project” goes through three phases, in order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Explore&lt;/strong&gt; - you’re experimenting with solutions, including choosing the problems to solve, trying to find a good fit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Expand&lt;/strong&gt; - you found a problem/solution fit, it working well enough that everyone wants it and you’re scrambling to scale it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extract&lt;/strong&gt; - you have scaled, now you need to take a deep breath and extract all the value you can from it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Laterr, Rinse, repeat.&lt;/p&gt;

&lt;p&gt;I put projects in quotes because the model scales from a work ticket all the way up to a startup business. As Kent says, it’s fractal - 3Xs all the way down. Pick your altitude(s) when applying to your own context.&lt;/p&gt;

&lt;h2&gt;3X is Made of People&lt;/h2&gt;

&lt;p&gt;I’ve been thinking about the 3Xs from a different direction. What does 3X look like when looking at it people-first? Who are the people who thrive, or don’t, at each stage? Hypotheses ahead…&lt;/p&gt;

&lt;p&gt;Have you worked with people who seem to hop from startup to startup? How about folks who thrive on the chaos of sudden success? Ever seen people who drop into any protect and tidy up all the time, making things simpler and smoother every day?&lt;/p&gt;

&lt;p&gt;Using 3X as a guide, what you have seen are Explorers, Expanders, and Extractors. They are people who are really good at contributing at each stage. And maybe less so in others. They show up in all roles on software product teams. How does this idea change your thinking about the people on the project?&lt;/p&gt;

&lt;p&gt;I once worked with a developer I liked a lot named Freddie. I learned lots of great coding techniques and deep domain knowledge from him. We got so much done when Freddie was on a project. But I did notice a pattern. When he stayed on a project for a long time, new people had a hard time ramping up to the patterns in the code. Freddie would keep getting lots done, but the team as a whole would slow down. This didn’t make sense.&lt;/p&gt;

&lt;p&gt;Freddie was an Expander. He was great at dropping in to a project with a lot of chaos, taming the really hard, immediate problems while ignoring the things that didn’t matter as much. He loved the variety and the urgency. He helped teams get out of the panic and closer to Extract territory. But when the project crossed over into the Extract phase, he wasn’t as effective. His solutions worked, but were hard to learn about and to maintain day-to-day.&lt;/p&gt;

&lt;p&gt;Once management realized that he had a sweet spot, we shifted his role and moved him between projects often. More teams got “Freddie Time” when they had scaling issues. He stayed engaged and helpful on each project, teaching his Expander skills all around the department. Everyone was happier.&lt;/p&gt;

&lt;p&gt;Explorers are the folks who excel at starting new projects. They deal with bootstrap and boilerplate to get the team moving, help set architectural direction, and encourage experimentation with new tools and techniques. All of this works well when the greenfield is new and lush. But they it doesn’t work as well when scaling challenges start - that’s when you need a Freddie.&lt;/p&gt;

&lt;p&gt;Extractors are the ones who want to know everything before they get started helping a team. Sort of like &lt;a href="https://konmari.com/about-the-konmari-method/"&gt;Marie Kondo&lt;/a&gt;.  They want to march through big swaths of the code, looking at patterns and tools. They delete the unnecessary complexity with extreme prejudice. They spot all the opportunities to refactor, encourage test suite maintenance, and make the project simpler.&lt;/p&gt;

&lt;p&gt;(I am full of Extractor tendencies when it comes to software projects. That doesn’t hold true in the real world. Do &lt;em&gt;not&lt;/em&gt; look in my garage.)&lt;/p&gt;

&lt;h2&gt;What, Then?&lt;/h2&gt;

&lt;p&gt;Every team needs Explorers, Expanders, and Extractors. They are each handy in their own ways and at key times. So how can you apply this new perspective?&lt;/p&gt;

&lt;p&gt;If you don’t manage people, maybe this model can help you understand yourself a little better. You used to love your project, but it now seems like a slog. Or your performance feedback went from very positive to meh. Perhaps your project has moved between stages and needs you to change your mindset. Or maybe there’s another project when you can help even more.&lt;/p&gt;

&lt;p&gt;If you do manage people, take a look at your teams and their projects. What stage of 3X are they in? Are they suddenly struggling? Or are they dealing with change very well? How are the people on those teams faring on the projects over time? Will some coaching about what the priorities need to be help them? By moving people between projects, can you help a career and a project (and thus a business) at the same time?&lt;/p&gt;

&lt;p&gt;Thinking about the 3X’s of people can help you staff your projects for maximum productivity and happiness. It turns out software is made of people.&lt;/p&gt;

</content>
    <published>2022-06-19T14:58:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>What Brown M&amp;M's Taught Me About Software</title>
    <link href="https://dwf.bigpencil.net/what-brown-mms-taught-me-about-software/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Not all software experience is programming.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;I wrote this originally in 2013, and it’s been hosted on the Pivotal Labs, then Pivotal Software, and now VMware Tanzu blog ever since. But I wanted to keep a copy of it around. So here you go, with some light editing.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I had no clue how we were going to afford Branford Marsalis.&lt;/p&gt;

&lt;p&gt;I’m not sure who was the instigator, but there was consensus. The Contemporary Concerts team wanted Athens, Georgia, home to an R.E.M.- and/or NCAA-Division-I-football-crazed University of Georgia campus, to host the Sting side-man and New Orleans Jazz scion to perform. I had been on the Concerts team since I was a freshman and was wrapping up my leadership year. A Branford show was a good “last show”: someone famous, interesting, and diverse.&lt;/p&gt;

&lt;p&gt;The booking agent had just quoted a larger fee than expected. I had not negotiated the finances of a show before. This skill was in the job description but was rarely exercised. Students’ wallets only open so far. This wasn’t going to work. I was stumped.&lt;/p&gt;

&lt;p&gt;This all came rushing back recently when &lt;a href="https://techcrunch.com/2013/06/22/the-technical-interview-is-dead/"&gt;Google announced&lt;/a&gt; that their traditional methods of recruiting and interviewing were not predictive of new college graduates’ success. They see the academic computer science environment as being &lt;a href="https://www.nytimes.com/2013/06/20/business/in-head-hunting-big-data-may-not-be-such-a-big-deal.html"&gt;very different than the corporate software environment&lt;/a&gt;. This was not much of a surprise to me. Submitting a class project is not the same as shipping production code. The job of a software engineer is to design, develop, and ship while working on project teams with other people, high stress, and big consequences.&lt;/p&gt;

&lt;p&gt;Said another way, there the real world is not in a computer lab.&lt;/p&gt;

&lt;p&gt;But my entire college career was not just in the computer labs on UGA’s South Campus. I was one of the few geeks who ventured to the middle of campus and got involved with the University Union. I “worked” with mostly North Campus majors – Journalism, English, Drama, and Art – at the Tate Student Center, booking movies, concerts, and lectures on campus. At the time, there were very few terminals, algorithms, or compilers around.&lt;/p&gt;

&lt;p&gt;Computers were starting to proliferate around campus – I spent plenty of time teaching MS Word shortcuts, recovering deleted files, and solving &lt;a href="https://en.wikipedia.org/wiki/PC_LOAD_LETTER"&gt;PC LOAD LETTERs&lt;/a&gt;. But aside from one concert where I was able to re-program &lt;a href="https://en.wikipedia.org/wiki/deee-lite"&gt;Dee-Lite’s&lt;/a&gt; lighting system – I was the only person who could count in binary and knew how to flip some barely-accessible dip switches – my CS knowledge did not get much use around the Tate Center.&lt;/p&gt;

&lt;p&gt;I started as a freshman moving speakers and taking tickets. I worked my way up the ranks, finding artists on tour, working security, and buying the obscure things that were &lt;a href="https://www.vhnd.com/2013/01/03/van-halens-no-brown-mms-concert-rider-infographic/"&gt;buried&lt;/a&gt; on &lt;a href="https://www.slate.com/blogs/behold/2013/06/02/henry_hargreaves_band_riders_pokes_fun_at_the_outrageous_requests_of_rock.html"&gt;contract riders&lt;/a&gt;. By my last year I was managing the sound and light crew and finding runners (who had approval to drive from the University motor pool) to pick up food for 40 people so we ate before show time.&lt;/p&gt;

&lt;p&gt;There are so many similarities between producing a concert and shipping software. Each is a large project that involves a lot of moving parts: complex dependent subsystems, opaque politics, resource budgets, and vocal customers. I spent time coordinating multiple service vendors, student teams, and a musical artist. I managed budgets, ran marketing campaigns, and represented student interests to the school administration. I learned to be ready for anything – to stop, assess and find simple, effective solutions that achieve some manner of consensus.&lt;/p&gt;

&lt;p&gt;I essentially double majored in Computer Science and Project Execution. My “classes” at the University Union provided a lot of practical experience that gave me a leg up that first day after graduation. I was ready when my project was canceled and we had to figure out how to document everything and close it down. I was unsurprised when I was asked to be on a plane in 4 hours to courier hardware to a business partner in Tokyo. I adapted each time I was laid off with little (or poor) explanation.&lt;/p&gt;

&lt;p&gt;So what’s the big deal about a little negotiation? With no cards to play with Branford’s agent, I went for honest.&lt;/p&gt;

&lt;p&gt;“I’m not sure we can afford this show after all. Our venue only seats 800 and at the  ticket price we’d charge, I’d have a student revolt. Can you come down on the fee at all? Is there another way to make this happen? The team really wants some jazz on campus.” It was worth a shot – you don’t get answers if you don’t ask questions.&lt;/p&gt;

&lt;p&gt;“Hang on…can we move to Saturday? That gives the guys a day off after your show and &lt;em&gt;that&lt;/em&gt; means we can do two sets for you at the same price.”&lt;/p&gt;

&lt;p&gt;I checked our schedule. The venue was open on the newly proposed day. It moved to a weekend which meant a nearly certain sell-out. And at half the ticket price with double the attendance. Everybody wins.&lt;/p&gt;

&lt;p&gt;Then I responded, “That totally works. FedEx me the contract.”&lt;/p&gt;

&lt;p&gt;Today I’d just say “Ship it!”&lt;/p&gt;
</content>
    <published>2022-01-16T18:51:00-08:00</published>
    <updated>2023-07-17T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Job Search Journaling with Obsidian - updated</title>
    <link href="https://dwf.bigpencil.net/job-search-obsidian-update/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">A small update to my Obsidian Notebook and templates for tracking a job search</summary>
    <content type="html">
&lt;p&gt;I wrote an article a few months ago about how I was using &lt;a href="https://obsidian.md"&gt;Obsidian&lt;/a&gt; to take &lt;a href="/my-obsidian-for-a-job-search/"&gt;copious notes during my job search&lt;/a&gt;. It covers research into companies, connections in my network, and keeps true to Obsidian daily notes patterns. I’ve kept up the practice and it has served me well. But I found a small tweak I wanted to share.&lt;/p&gt;

&lt;p&gt;Interestingly, a company that had turned me down early in my search got back in touch about a new role. When letting you down, internal recruiters always say, “We’ll keep you in mind in the future!” I’ve always written this off as “nice,” but here we are, several months later, and I have a re-screen/catchup chat on the calendar. Quick! To Obsidian!&lt;/p&gt;

&lt;p&gt;I immediately ran into a problem. It was harder than I expected to walk the timeline of all of the different calls, meetings, and emails, refreshing my memory. Information was scattered around my daily notes, my per-company-note, and random notes here and there. Even with search and unlinked mentions, it was not easy at all.&lt;/p&gt;

&lt;h2&gt;Problems to Solve&lt;/h2&gt;

&lt;p&gt;An interview cycle with a company is a series of interactions that need to be tracked in “one place” for easy retrieval. This system needs to make it easier to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have a complete view of all interactions with and about the hiring company&lt;/li&gt;
  &lt;li&gt;Know when interactions happened&lt;/li&gt;
  &lt;li&gt;Retrieve the notes at each interaction
    &lt;ul&gt;
      &lt;li&gt;Notes I take during a call&lt;/li&gt;
      &lt;li&gt;Key points from emails (e.g., next steps, rejection details)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;A Solution&lt;/h2&gt;

&lt;p&gt;My daily note template has a Calendar section. On the day of a meeting, I will have a heading in that section like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markdown"&gt;# Calendar

## 0230p Christina @ [[Everything Imaging]]

(notes from this call go here)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That Obsidian link goes to the Company research note.&lt;/p&gt;

&lt;p&gt;The Company research note, then has the backlink to the daily note in a new section labeled Timeline:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markdown"&gt;# Timeline

- [[2021.08.05]] Screening Phone call with Billy
- [[2021.08.17]] Christina interview via Zoom
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;The Files&lt;/h2&gt;

&lt;p&gt;The repo &amp;amp; files live in “Release 2” at &lt;a href="https://github.com/infews/job_search_in_obsidian/releases"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The research template now has the “Timeline” section (replacing “Application”)&lt;/li&gt;
  &lt;li&gt;Added how to use this section in a few places.&lt;/li&gt;
  &lt;li&gt;Renamed the company/role note as “Research Note”&lt;/li&gt;
&lt;/ul&gt;

</content>
    <published>2021-09-17T14:36:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>What I Talk About When I Talk About Management</title>
    <link href="https://dwf.bigpencil.net/managing-agile-teams/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Agile teams and "management" do not have to be mutually exclusive. Management is essential the long term success of agile teams.</summary>
    <content type="html">
&lt;p&gt;I stepped in it (again) on Dev Twitter, jumping into a discussion about management on agile teams. I saw &lt;a href="https://twitter.com/allenholub/status/1396171069627633667"&gt;this thread from @allenholub&lt;/a&gt; that had an interesting reply from &lt;a href="https://twitter.com/alexbunardzic"&gt;@alexbunardzic&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;The more I work on implementing XP in the teams I&amp;#39;m leading, the more I&amp;#39;m starting to strongly realize that a team is the smallest unit of work. Bypassing the team to hunt down &amp;amp; corner individual team members for some inane &amp;quot;performance appraisal&amp;quot; is so wrong on so many levels.&lt;/p&gt;&amp;mdash; Alex Bunardzic #BlackAndAsianLivesMatter (@alexbunardzic) &lt;a href="https://twitter.com/alexbunardzic/status/1396280635665256451?ref\_src=twsrc%5Etfw"&gt;May 23, 2021&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I like the first sentence a lot. I am a strong believer in the team being the agent of work on an agile product team. I have a more complex reaction to the second. Nobody likes an “inane ‘performance appraisal’.” But there are times when people need individual help. So I jumped in…&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It is possible and necessary to separate individual management from team execution, while still treating the team as a unit of work.&lt;/p&gt;&amp;mdash; Davis W. Frank (@dwfrank) &lt;a href="https://twitter.com/dwfrank/status/1396468672772804619?ref\_src=twsrc%5Etfw"&gt;May 23, 2021&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;Which led to this great analogy:&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;It all boils down to what is being evaluated. An analogy: pass the baton race. Dysfunctional orgs keep a watchful eye on the runners. Mature orgs only care about the baton. Knowing that, teams who are lucky to work in mature orgs organize themselves to optimize the flow of baton.&lt;/p&gt;&amp;mdash; Alex Bunardzic #BlackAndAsianLivesMatter (@alexbunardzic) &lt;a href="https://twitter.com/alexbunardzic/status/1396473208010809348?ref\_src=twsrc%5Etfw"&gt;May 23, 2021&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I find the assertion “Mature orgs only care about the baton” myopic. But let’s run with this one.&lt;/p&gt;

&lt;p&gt;Let’s say we have a 4x400 relay squad who has a set of goals for the season and they have self organized. They are running agile. They are doing well. They have gone from the back of the rankings to contending in most meets. Medals! Success! Fantastic!&lt;/p&gt;

&lt;p&gt;What about the individual runners?&lt;/p&gt;

&lt;p&gt;This team probably has a coach, or even coaches. The coaching staff worries about all sorts of problems: individual runners’ practice schedules, exercises, hydration, injuries, and egos. That sounds a lot like management to me.&lt;/p&gt;

&lt;p&gt;Is the coach, then a member of the squad? Sure. Slice the team however you want. I think the point stands that not all team activities, or team members, are directly about execution to outcomes. There are occasions for additional support to help the runner and the team.&lt;/p&gt;

&lt;p&gt;Let’s pop up a level. Say our relay squad is part of an entire Track &amp;amp; Field (Athletics) team. There are more running events. There is the heptathlon and decathlon. The Athletics team has a desired outcome to maximize medals across all of the events. This means more fans and more sponsorships and a better future for all of the team members.&lt;/p&gt;

&lt;p&gt;What if swapping a runner off of the 4x400 squad improves the chances of more medals for the team? Or that by moving a runner off of the 4x400, that squad’s time improves? And then that frees up a runner who can enter another event? Or if one of the runners misbehaves outside of their work and sponsors threaten to take away necessary support? How does the team handle these situations?&lt;/p&gt;

&lt;h2&gt;Running Turtles&lt;/h2&gt;
&lt;p&gt;When teams are given desired outcomes and given the agency to self organize, they can do amazing things. This is what Agile is all about. But teams do not exist in isolation. They are made of individuals. In larger organizations, teams are working with and/or alongside other teams.&lt;/p&gt;

&lt;p&gt;There is self similarity here. It’s turtles - I mean teams - all the way down. A person is a team of one. An organization is a team of teams.&lt;/p&gt;

&lt;p&gt;If you ignore the people on a team, you run the risk of losing people from the team and perhaps miss your goals. If you ignore the context in which your team operates, you may wander away from desired outcomes and lose funding. Oops.&lt;/p&gt;

&lt;p&gt;This does not have to be due to malicious ignorance. It can come just from natural tendencies to over focus “on the baton” or team members who do not have skills on the team to notice and deal with the problems. So how can you fix this and “stay agile?”&lt;/p&gt;

&lt;h2&gt;Defining Terms&lt;/h2&gt;
&lt;p&gt;Let’s expand the model a bit. I’m going to avoid using the term &lt;em&gt;Management&lt;/em&gt; and instead define some new-ish ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coaching&lt;/em&gt; is the set of solutions that focuses on the needs of the individual within the context of their team. This includes helping a person reach their maximum potential within that team and the organization.&lt;/p&gt;

&lt;p&gt;Teams can do a good job coaching directly within the goals of the team. But there are other situations - toxic personalities, complex feedback, or individual goals that are potentially outside the scope of the teams’ goals - that sometimes need an outside perspective.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Governance&lt;/em&gt; is the set of solutions that focuses on the needs of the teams within the context of their organizations. This includes helping teams reach their maximum potential within the organization while considering the needs of the organization. This includes supporting coaching.&lt;/p&gt;

&lt;p&gt;A team only exists while it is funded. And it’s funded to solve a problem, usually to make a thing that solves a problem. When in the course of solving that problem, their actions or solutions detract from the organization’s goals, then there is a need for at least a discussion, and possibly a correction.&lt;/p&gt;

&lt;p&gt;Some situations - both team and individual - can be solved by moving individuals between teams. These situations need input from a lot of directions - involving coaching and governance - in order to get resolved.&lt;/p&gt;

&lt;p&gt;This model is the result of observation and iteration that happened during my time at Pivotal. We grew from roughly forty consultants at Pivotal Labs San Francisco in 2008 to the 2000+ employees who VMware acquired at the end of 2019. Coaching and Governance were a key part of that growth.&lt;/p&gt;

&lt;h2&gt;Implementing and Iterating&lt;/h2&gt;
&lt;p&gt;In 2010 or so, Pivotal Labs had several high performing agile teams - one for each client of our consulting practice. We had identified the need for team-independent individual coaching. We created a new role to fill that need and gave it the title of “manager.”&lt;/p&gt;

&lt;p&gt;Managers remained consultants on projects about 80% of the time. They mostly, but not always, coached people on other teams. Which meant spending about 20% of their time coaching people in 1-1’s outside of the team context. Individuals “reported to” managers in the HR/hierarchy sense.&lt;/p&gt;

&lt;p&gt;Some governance was simple. Our clients provided most of the governance for any one team. After all, we were teaching them agile practices for their products. They had their own goals and the teams managed themselves to them.&lt;/p&gt;

&lt;p&gt;Pivotal’s need for governance across teams presented itself around staffing changes. We had to staff new projects and deal with projects ending. We needed to ensure we were growing individuals’ skills, onboard new people, and fill seats when someone went on vacation. People quit. Some people did not work well together. This governance was the responsibility of “directors”&lt;/p&gt;

&lt;p&gt;We called the process of moving people around between projects “Allocations.” It was a calculus that took input from the clients, all of the teams, and all of our staff to determine who, if any, moved between projects each week. This was initially a meeting of two people and a whiteboard. Over time it grew to a continuous discussion between the team of directors and the managers. The managers were the proxies for their people in these discussions.&lt;/p&gt;

&lt;p&gt;The managers were an agile team across all of the other teams. They needed coaching as they grew, met new challenges, and adapted. Managers reported to Directors who provided that coaching.&lt;/p&gt;

&lt;p&gt;These management practices scaled, with several tweaks over time to, 17+ Pivotal Labs offices, the Cloud Foundry product teams, and had some influence over the rest of Pivotal R&amp;amp;D. I spent time managing in both organizations. By the time I left in early 2020, there was a lot that was working well. And there was plenty that was not. Some things remained very hard.&lt;/p&gt;

&lt;p&gt;Annual Performance Reviews - which is a very non-agile implementation of recognizing achievement - was definitely one of them. It sort of worked. We did not bypass the team to get information and we cornered nobody. But it was not a smooth process and was a contributor to another problem: manager burnout. The burnout came came from other sources, too. Learning to be a manager was challenging and often amorphous. For managers of developers, I think the balance of time on teams vs time as coach was not sustainable.&lt;/p&gt;

&lt;p&gt;Gathering, filtering, and delivering feedback was vital to coaching individuals to success. Bad actors were managed out of the company, people found teams where they could contribute more, and I know of a couple of careers that blossomed thanks to how we handled feedback. But as well as we did this, as a solution space it needs a lot more cross-discipline work before I would consider it smooth.&lt;/p&gt;

&lt;h2&gt;Interface and Implementation&lt;/h2&gt;
&lt;p&gt;All this said, I think our iterations and adaptations to add coaching and governance were valid and helpful to the people, teams, and company. I will use this experience to help any team I’m a part of.&lt;/p&gt;

&lt;p&gt;What I hear a lot, and part of the arguments in the tweet thread, is that agile teams have an interface line (goals/metrics/outcomes) that management cannot cross. That any suggestions about changing things inside the team by a hierarchical manager is &lt;em&gt;anti-agile&lt;/em&gt;! That teams could get so much more done without such meddling!&lt;/p&gt;

&lt;p&gt;I agree that meddling and micro-management, what &lt;a href="https://twitter.com/testobsessed"&gt;Elisabeth Hendrickson&lt;/a&gt;  (channeling &lt;a href="https://en.wikipedia.org/wiki/Gerald_Weinberg"&gt;Jerry Weinberg&lt;/a&gt;) calls “inflicting help,” are anti-patterns. Agile methods aim to prevent these practices.&lt;/p&gt;

&lt;p&gt;In my experience, to ignore the team-independent needs of individuals leads to other anti-patterns like burnout, resignations, and general unhappiness. And to ignore the team-interdependent needs of an organization can lead to funding being pulled, the wrong product being built, or organizational collapse.&lt;/p&gt;

&lt;p&gt;Adding concepts like coaching and governance can help people and teams to do their best. And it is possible to add them incrementally, and process feedback about using them, just like you can with any agile practice.&lt;/p&gt;

&lt;script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

</content>
    <published>2021-06-02T07:59:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>On Pair Programming</title>
    <link href="https://dwf.bigpencil.net/on-pair-programming/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">In which I talk about my experience and ideas on how to build a sustainable pairing environment for your team.</summary>
    <content type="html">
&lt;p&gt;The internet had a bit of a buzz about &lt;a href="https://www.simplermachines.com/the-mortifying-ordeal-of-pairing-all-day/"&gt;Nat Bennett’s thoughtful post on their pairing experience&lt;/a&gt;. I think they did a great job talking about the personal impact of the pros and the cons of how we practiced pair programming at Pivotal.&lt;/p&gt;

&lt;p&gt;Dev Twitter can tell you all you ever wanted to know, and maybe much you are worried about, on the &lt;a href="https://martinfowler.com/articles/on-pair-programming.html"&gt;topic of Pair Programming&lt;/a&gt;. Dev Twitter will also swarm you with claims that differ from your experience. Because, &lt;em&gt;opinions&lt;/em&gt;, man.&lt;/p&gt;

&lt;p&gt;Naturally, here are some of mine.&lt;/p&gt;

&lt;h2&gt;Pairing at Pivotal Labs&lt;/h2&gt;

&lt;p&gt;The Pivotal Labs consulting practice was built to immerse product teams in agile practices. Those practices started with &lt;a href="https://en.wikipedia.org/wiki/Extreme_programming"&gt;Extreme Programming&lt;/a&gt; (XP), and added &lt;a href="https://theleanstartup.com/"&gt;Lean Startup&lt;/a&gt; and &lt;a href="https://tanzu.vmware.com/developer/learningpaths/application-development/balanced-teams/"&gt;Balanced Team&lt;/a&gt; over time. Clients paid for and expected the immersion. The work was (almost exclusively) in our offices, thus away from their normal day-to-day routines, to maximize exposure to new ways of working.&lt;/p&gt;

&lt;p&gt;For developers, XP includes pairing. So developers - pivots and clients - paired from 9am to 6pm. Every day sitting at your own keyboard, mouse, and screen, but at the same computer as another developer (who has their own keyboard mouse and screen). The coaching and learning and dead ends and green-test-runs and high-fives were constant. Breaks happened - people got up to walk around the block, play ping pong, get coffee, etc. But still, it was exhausting.&lt;/p&gt;

&lt;p&gt;When someone is new to pairing I use the metaphor of martial arts. You are teaching yourself a new set of skills. Some are mental - thinking aloud, active listening, and figuring out how your pair does the same. Some are physical - negotiating for keyboard control, using a new set of keyboard shortcuts, and navigating a different sense of personal space. You will be tired - a &lt;em&gt;lot&lt;/em&gt; - in the first few days-to-weeks because you are thinking and doing differently than before. But with regular practice, and coaching, and breaks, you will build what feels like super powers.&lt;/p&gt;

&lt;p&gt;Projects would start with pivot developers pairing with client developers. Over time client developers would pair with each other. The ratio of clients-to-pivots would increase over the life of the project. The client developers became the coaches. It was amazing to watch.&lt;br /&gt;
Pivotal Labs was successful at teaching teams how to “be agile” while shipping software. Pair programming was a foundational element of this success.&lt;/p&gt;

&lt;h2&gt;My Personal Experience&lt;/h2&gt;
&lt;p&gt;My first month pair programming was draining. I would leave the office spent. And I slept very, &lt;em&gt;very&lt;/em&gt; well each night. It was a lot of “wax on, wax off.” But after a few weeks, I did have a well-painted fence. And the finish on the cars was concours-quality.&lt;/p&gt;

&lt;p&gt;When I left that job (after about a year) and started at Pivotal Labs, it was like starting over painting an entirely new fence around an entirely new parking lot of old cars. It was hard work, but I learned so much about myself and about the craft of software.&lt;/p&gt;

&lt;p&gt;I stayed for 12 years. I worked through lots of change in the company and various roles on different teams. But when I was a developer, I paired by default every day. Pairing works for me. I find I’m even more productive when I pair. I enjoy it. Even fourteen years later.&lt;/p&gt;

&lt;h2&gt;Introducing Pairing&lt;/h2&gt;

&lt;p&gt;If pairing sounds interesting, you might wonder how pairing could help your team. Here are some questions to ask:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How long does it take for new developers to ramp up and be effective? How long until they can lead new work?&lt;/li&gt;
  &lt;li&gt;How much time do your developers spend being coached in the craft? Are they asking for more?&lt;/li&gt;
  &lt;li&gt;How does your team review code? Does this process work well? How long does it take to get code to production?&lt;/li&gt;
  &lt;li&gt;What happens to the pace of work when integrating new, large blocks of features into the product? Or when finding and fixing a particularly thorny bug? How long does it take that pace to recover?&lt;/li&gt;
  &lt;li&gt;Are there knowledge silos on the team? How large is the risk of losing one “key” person due to vacation, resignation, or other reason for leaving the team?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With practice, paring can improve these metrics while continuing to ship software predictably. Teams can grow, and shrink, with low disruption. Developers are learning from each other, improving their craft. They ship lots of business value with high confidence.&lt;/p&gt;

&lt;p&gt;TL;DR - Pairing &lt;em&gt;can&lt;/em&gt; work. &lt;em&gt;Some&lt;/em&gt; developers like it. A lot. But that’s not enough.&lt;/p&gt;

&lt;h2&gt;Deciding to Pair&lt;/h2&gt;

&lt;p&gt;But how does a team start pairing?&lt;/p&gt;

&lt;p&gt;The team has to decide, as a group, to try pair programming. It’s too big a change to the status quo, from developer up into management, to “just start.” If you want some help here, begin with &lt;a href="https://janicefraser.com/"&gt;Janice Fraser&lt;/a&gt; and her &lt;a href="https://vimeo.com/298568369"&gt;U-BAD model of decision making&lt;/a&gt; : Understanding, Belief, Advocacy, and Decision.&lt;/p&gt;

&lt;p&gt;You need a solid foundation. The team needs to understand what pairing is and how it will work. They also need to believe that it could help them. And that they will have support from each other and management to make it work. Pairing can help. A lot. But the team has to make the decision.&lt;/p&gt;

&lt;h2&gt;Sustainable Pairing Practices&lt;/h2&gt;

&lt;p&gt;Once the team has made the decision and set themselves up for success, what next? I recommend that everyone starts the day pairing. Having a standup meeting first thing gives everyone a daily reset and catch-up. It’s time to ask for help and plan the rest of the day (see my post &lt;a href="/improving-standups/"&gt;Improving Standups&lt;/a&gt; for tips).&lt;/p&gt;

&lt;p&gt;Among the messages Nat gave us from their post, the key one is sustainability. The team should set itself up so that individuals ease into, and recharge from, pairing time. This increases the chances of adoption and thus the impact on the team and product.&lt;/p&gt;

&lt;p&gt;It is important to set the expectation that the entire day will not be pairing-on-code time. As the &lt;a href="https://martinfowler.com/articles/on-pair-programming.html"&gt;guide mentions&lt;/a&gt;, there are plenty of non-pairing situations. The pair can and should plan their work around the meetings and 1:1’s. This planning is as much about making sure these happen as it is to avoid abandoning someone in a big coding problem.&lt;/p&gt;

&lt;p&gt;Encouraging and taking breaks is vital. People get mentally tired. There is a reason you may have heard that we &lt;a href="https://youtu.be/5h-zsDXQH_8?t=181"&gt;played a lot of ping pong&lt;/a&gt; at Pivotal. It is a paired activity that gives your coding brain some rest. I have also found that walks outside - or in a pinch, staring out the window - can be restorative.&lt;/p&gt;

&lt;p&gt;The team also should schedule time for solo work. Deep research, reading, and writing are necessary work that are also best as solo activities. Some teams schedule regular solo “spike” or “exploration” days that allow for personal investigation.&lt;/p&gt;

&lt;p&gt;Determining when you break up pairing sessions, be it for meetings or walks or table tennis, is going to be a personal or team decision. Some people will like long, unbroken stretches of pairing time. Others will like three or four smaller stints. Experiment. Iterate. Have focused retrospectives on pairing. Make tweaks.&lt;/p&gt;

&lt;p&gt;Nat reminds us that teams are made up of individuals. And individuals are, well, individual. Each person’s reaction is going to be different. Pairing won’t work for everyone. And that is OK. Prepare for some people to opt out - be ready to move them to other teams.&lt;/p&gt;

&lt;p&gt;In my experience I’ve seen pair programming work in a lot of contexts. But for pairing to &lt;em&gt;last&lt;/em&gt; in a lot of contexts, you need to remember that your developers are people. And you need to take care of people first so that they can take care of the product and themselves.&lt;/p&gt;
</content>
    <published>2021-05-26T07:51:00-07:00</published>
    <updated>2023-07-17T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>My Obsidian for a Job Search</title>
    <link href="https://dwf.bigpencil.net/my-obsidian-for-a-job-search/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">How to use an Obsidian vault that tracks all of the research, interview notes, and status during a job search.</summary>
    <content type="html">
&lt;p&gt;My friends have been great about asking me how my current job search is going. Twice in the last month, people have asked a follow-up, “How are you tackling the problem?”&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/obsidian/glad-de1f1aa5.jpg" alt="I'M GLAD YOU ASKED" /&gt;&lt;/p&gt;

&lt;p&gt;The answer this time is some new habits, a couple of apps, and Obsidian (duh).&lt;/p&gt;

&lt;h2&gt;The Short Version&lt;/h2&gt;

&lt;p&gt;I have a daily routine that looks roughly like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search for Jobs&lt;/li&gt;
  &lt;li&gt;For each interesting job, write up research notes&lt;/li&gt;
  &lt;li&gt;Track the status of the job application on a Kanban board (I use &lt;a href="https://todoist.com"&gt;Todoist&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;For each application, customize a generic resume and cover letter (Google Docs)&lt;/li&gt;
  &lt;li&gt;Take notes on each discussion and interview&lt;/li&gt;
  &lt;li&gt;Keep some common interview questions and answers in a note&lt;/li&gt;
  &lt;li&gt;Keep the Kanban updated as applications happen and change status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Naturally, I take all the notes in Obsidian.&lt;/p&gt;

&lt;p&gt;It’s hard to write this up linearlly. This summary wasn’t feeling helpful. If only there were some way to deliver a folder of notes, including some templates, with some linking.&lt;/p&gt;

&lt;p&gt;Oh, wait.&lt;/p&gt;

&lt;h2&gt;But Why Not an Obsidian Vault?&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/infews/job_search_in_obsidian"&gt;Here it is&lt;/a&gt; - a folder of Markdown files that walks you my current job search process. It handles all of the steps above. It allows for lots of personalization. And if you open these files in Obsidian - as their own Vault, or just copy them to your main Vault - then you get even more power out of your second brain.&lt;/p&gt;

&lt;p&gt;It’s also a GitHub repo. So issues welcome. Though I will be picky about PR’s. Make this your own.&lt;/p&gt;

</content>
    <published>2021-04-30T17:03:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Cmd-O is My New and Old Friend</title>
    <link href="https://dwf.bigpencil.net/cmd-o-is-my-new-and-old-friend/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">One keystroke for Obsidian search-or-create. This. Is. Awesome.</summary>
    <content type="html">
&lt;p&gt;When I was a big &lt;a href="https://brettterpstra.com/projects/nvalt/"&gt;nvALT&lt;/a&gt; user, I got very used to a specific set of actions whenever I needed to take notes on something I would…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;Cmd-Tab&lt;/code&gt; over to nvALT&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Cmd-L&lt;/code&gt; to get to the search bar&lt;/li&gt;
  &lt;li&gt;Type the thing on my mind&lt;/li&gt;
  &lt;li&gt;Scan the search results&lt;/li&gt;
  &lt;li&gt;Choose a note Edit/Append to the note as needed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hit &lt;code&gt;Enter&lt;/code&gt; to make a new file to empty my brain into&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This was deep, &lt;em&gt;deep&lt;/em&gt; muscle memory for me. “This feels familiar. Did I ever write anything up about…” then &lt;code&gt;Cmd-Tab&lt;/code&gt;, &lt;code&gt;Cmd-L&lt;/code&gt;, type-ity-type-ity, and continue on. This was very smooth.&lt;/p&gt;

&lt;p&gt;As much as I’ve raved about Obsidian in this series, I was missing this feature.&lt;/p&gt;

&lt;p&gt;But it turns out that &lt;code&gt;Cmd-O&lt;/code&gt; is &lt;em&gt;all you had to say&lt;/em&gt;. It’s nearly the same functionality. The search happens in a modal dialog and gives you the option of navigating down to the note you want or just creating a new note with the search contents as the title.&lt;/p&gt;

&lt;p&gt;And yes, Windows &amp;amp; Linux users, &lt;code&gt;Ctrl-O&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I now keep my left pane collapsed by default and only use the search tab for looking for tags.&lt;/p&gt;

&lt;p&gt;Just glorious.&lt;/p&gt;

</content>
    <published>2021-04-30T17:00:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>History of The Big Pencil</title>
    <link href="https://dwf.bigpencil.net/big-pencil/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Whenever someone asks me about the bigpencil.net domain, I get to tell this story.</summary>
    <content type="html">
&lt;p&gt;Whenever someone asks me about the bigpencil.net domain, I get to tell this story.&lt;/p&gt;

&lt;p&gt;In 1965, my dad was a business major, finishing up his senior year at &lt;a href="https://uga.edu"&gt;The University of Georgia&lt;/a&gt; (ɢᴏ ᴅᴀᴡɢs).&lt;/p&gt;

&lt;p&gt;Things were going well for Dad. He had just accepted a job with IBM in Atlanta. He was excited and wanted to share this success with his advisor. So he headed to North Campus and the professor’s office.&lt;/p&gt;

&lt;p&gt;Dad was not prepared for the reaction.&lt;/p&gt;

&lt;p&gt;“You’re doing &lt;em&gt;what??&lt;/em&gt; “ exclaimed the advisor, eyes squinted and brow furrowed.&lt;/p&gt;

&lt;p&gt;My dad replied, earnestly, “I’m going to be working at IBM. Computers really feel like they’re going to be a big deal.”&lt;/p&gt;

&lt;p&gt;The advisor continued to stare at my dad. The silence was far from comfortable.&lt;/p&gt;

&lt;p&gt;“Really? Do you know what a computer is?” He scribbled on a notepad, ripped off the top sheet, and slid it across the desk, and declared:&lt;/p&gt;

&lt;p&gt;“A &lt;em&gt;computer&lt;/em&gt; is nothing. But a &lt;strong&gt;BIG&lt;/strong&gt;. &lt;strong&gt;PENCIL&lt;/strong&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/pencil-52180e40.jpg" alt="The Big Pencil" /&gt;&lt;/p&gt;

&lt;p&gt;That note has been in this frame ever since.&lt;/p&gt;

</content>
    <published>2021-03-21T11:22:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Obsidian URLs</title>
    <link href="https://dwf.bigpencil.net/obsidian-links/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Linking to Obs from other apps is power.</summary>
    <content type="html">
&lt;p&gt;Obsidian’s URL scheme is fabulous. A link of this form:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;obsidian://open?vault=&amp;lt;vault_name&amp;gt;&amp;amp;file=&amp;lt;note_name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;..will open Obsidian with that vault and that note selected.&lt;/p&gt;

&lt;p&gt;I use this a lot with my task manager, linking back from projects and tasks to longer thoughts on the topic. I also link to notes &lt;a href="/series/obsidian/thoughts-on-vaults"&gt;other vaults&lt;/a&gt; as needed.&lt;/p&gt;

&lt;p&gt;With any note open, “Copy Obsidian URL” is available via the Command Palette and the note menu.&lt;/p&gt;

</content>
    <published>2021-03-21T09:14:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Note Taking in 1-1's</title>
    <link href="https://dwf.bigpencil.net/one-on-one-notes/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">1-1s are a special type of note.</summary>
    <content type="html">
&lt;p&gt;I have several regular meetings with a handful of people. These meetings are often peer-to-peer or manager-to-person type meetings. Here is how I use Obsidian to take notes during these meetings.&lt;/p&gt;

&lt;h2&gt;Create the Person’s Note&lt;/h2&gt;

&lt;p&gt;Before the first meeting, I make a note with the person’s name. Naturally, I use a &lt;a href="/series/obsidian/core-plugin-templates"&gt;template&lt;/a&gt; for this text.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-md"&gt;# {{title}} Background

# Topics

- [ ]

# Action Items

## Me

- [ ]

## {{title}}

- [ ]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Over time, I fill this template in like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-md"&gt;
# Andy Nelson Background

- University of Bedford
- Likes jazz drumming
- Partner is Wendy Lam

# Topics

- [x] Next semester's classes
- [x] LinkedIn Tutorial
- [ ] Career goals review
- [ ] Miles Davis album list

# Action Items

## Me

- [ ] Send goals template

## Andy

- [ ] Write Career Goals
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Background&lt;/strong&gt; is for the anything interesting about them. I usually pull most of this from our first meeting, but I’ve been known to add to it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Topics&lt;/strong&gt; is for anything I want to make sure to mention at our next meeting. I use checklists for these.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Action Items&lt;/strong&gt; gets any tasks we assign to each other during the meeting. Again checklists for these.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Meeting Day&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Before the Meeting
    &lt;ul&gt;
      &lt;li&gt;List the meeting in the Calendar section of the today’s note, with the time and a link to this file&lt;/li&gt;
      &lt;li&gt;Copy the open Topics from this note to today’s note as an agenda&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;During the meeting
    &lt;ul&gt;
      &lt;li&gt;Take notes as needed in today’s note&lt;/li&gt;
      &lt;li&gt;Mark discussed Topics and Action Items complete&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After the meeting
    &lt;ul&gt;
      &lt;li&gt;Brain dump any notes that didn’t make it to the Daily Note&lt;/li&gt;
      &lt;li&gt;Mark discussed Topics and Action Items complete in this file, too&lt;/li&gt;
      &lt;li&gt;Add any new Topics, Action Items, other background items, or expand this file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Between Meetings&lt;/h2&gt;

&lt;p&gt;I will add new Topics to the Person’s note as they come up. The Linked Mentions tab becomes a great historical list of our 1-1 meetings.&lt;/p&gt;
</content>
    <published>2021-03-21T09:14:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Don't Sleep on the Command Palette</title>
    <link href="https://dwf.bigpencil.net/love-the-command-palette/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">It takes me a while to learn new commands.</summary>
    <content type="html">
&lt;p&gt;While I’m still learning how to use Obsidian, I find the Command Palette amazing. &lt;code&gt;Ctrl+P/Cmd+P&lt;/code&gt; brings up a searchable list of commands. I find new actions here all the time. And it’s the fastest way to put an &lt;a href="/obsidian-links"&gt;Obsidian URL&lt;/a&gt; on your clipboard.&lt;/p&gt;

</content>
    <published>2021-03-21T09:14:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Community Plugin: Calendar</title>
    <link href="https://dwf.bigpencil.net/community-plugin-calendar/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">The calendar helps you build the daily journal habit.</summary>
    <content type="html">&lt;p&gt;This plug-in works with the Daily Notes plug-in. It adds a new tab in the right pane that gives a single-month view. Each date links to that day’s daily note, with a cute dot notation for the length of that note. You can also browse back and forth between months.&lt;/p&gt;

&lt;p&gt;I find this is faster for zeroing in on historical notes. And sometimes you just need another calendar right in front of you during the day.&lt;/p&gt;
</content>
    <published>2021-03-21T09:14:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Thoughts on Vaults</title>
    <link href="https://dwf.bigpencil.net/thoughts-on-vaults/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">When to Vault and when not to.</summary>
    <content type="html">&lt;p&gt;I keep nearly all of my notes in one Obsidian vault. I’ve found that cross-linking and my daily journaling have benefited the most from keeping everything in one directory and thus vault.&lt;/p&gt;

&lt;p&gt;I do have separate vaults for dedicated topics of longer form writing. I have an ongoing blog series that has its own vault. And I have another for a topic that may turn into a book.&lt;/p&gt;

&lt;p&gt;This series started as one note in the main vault.&lt;/p&gt;

&lt;p&gt;I keep the all of my vaults as subdirectories in one directory that lives online for ease of access from different computers and mobile devices. At the moment this is on Dropbox.&lt;/p&gt;

</content>
    <published>2021-03-21T09:14:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Using Links</title>
    <link href="https://dwf.bigpencil.net/using-links/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Cross note linking that isn't Markdown is OK.</summary>
    <content type="html">
&lt;p&gt;For internal links, I use the &lt;code&gt;[[wiki links]]&lt;/code&gt; style. This is the default option and I find it’s just faster when I’m typing and am pretty sure there’s a note I want to link to. And if I’m wrong, it’s one click to make that note.&lt;/p&gt;

&lt;p&gt;For external links, I have a strong preference for &lt;a href="https://www.markdownguide.org/basic-syntax#reference-style-links"&gt;reference-style links&lt;/a&gt; in my notes. Given that I spend so much time in Edit Mode, I find this keeps the notes more readable.&lt;/p&gt;

&lt;p&gt;I use named references, usually only one word, and stay away from numbers. Why? Because I’m always re-ordering them.&lt;/p&gt;

&lt;p&gt;Obsidian renders the references in smaller text, making them easy to ignore most of the time. But when you need them, they are easy to find.&lt;/p&gt;

&lt;p&gt;I also like putting them at the bottom of the current note, below a Horizontal Rule, where they are out of the way. I have experimented with putting all of the references at the top of the file, but for now, I keep them at the bottom.&lt;/p&gt;

</content>
    <published>2021-03-21T09:13:00-07:00</published>
    <updated>2023-07-17T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Using Tags</title>
    <link href="https://dwf.bigpencil.net/using-tags/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Tag it for easier search.</summary>
    <content type="html">&lt;p&gt;I am not a huge tag user. I find the search very good and the Linked/Unlinked mentions tab enlightening.&lt;/p&gt;

&lt;p&gt;However, I do have a few categories of notes I want called out. So I will drop a hashtag at the bottom of the file, below a Horizontal Rule, where it is out of the way. I’ve found I like this better than using YAML front matter.&lt;/p&gt;

&lt;p&gt;As I type this, I realize that all of the tags I care about are types of notes and thus have templates associated with them. So each template includes the tag. I barely even think about them except when searching.&lt;/p&gt;

</content>
    <published>2021-03-21T09:13:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Core Plugin: Templates</title>
    <link href="https://dwf.bigpencil.net/core-plugin-templates/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">DRY up your notes.</summary>
    <content type="html">&lt;p&gt;I enabled the Core plugin for Templates. This allows you to specify a directory of templates - just Markdown files - for when you create new notes.&lt;/p&gt;

&lt;p&gt;You get a new button on the left gutter called Insert Template for inserting templated text.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new file&lt;/li&gt;
  &lt;li&gt;Optionally name it&lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Insert Template&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you click this button, Obsidian asks you which template to insert, shows you a searchable list of all of your template files. Pick one and it’s inserted.&lt;/p&gt;

&lt;p&gt;The main option is a directory to hold your template text notes. I have named my template directory &lt;code&gt;_templates_&lt;/code&gt; so the folder pops to the top of my Notes tab. I keep it closed so I barely think about it. I’ve named each template &lt;code&gt;_Template&amp;lt;topic&amp;gt;&lt;/code&gt; so they are differentiated in any file list.&lt;/p&gt;

&lt;p&gt;There are a few variables it will evaluate, including inserting the title, date, and time, for customization.&lt;/p&gt;

&lt;p&gt;And yes, the Daily Journal plugin is fine with the daily template living in this directory.&lt;/p&gt;
</content>
    <published>2021-03-21T09:12:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Core Plugin: Daily Journal</title>
    <link href="https://dwf.bigpencil.net/core-plugin-daily-journal/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">The Daily Journal is key to remembering things.</summary>
    <content type="html">
&lt;p&gt;I use the Core Daily Journal plugin every day.&lt;/p&gt;

&lt;p&gt;This gives you a new button in the left gutter. Click on it and you get a blank, optionally templated, file named with today’s date, for taking notes for well, today. No matter what file you’re in, clicking that button will take you back to this file.&lt;/p&gt;

&lt;p&gt;The plugin allows for an optional template, stored in a file as a note. I find this invaluable for jump starting my day.&lt;/p&gt;

&lt;p&gt;I use the date format of &lt;code&gt;YYYY.MM.DD&lt;/code&gt;, which helps with sorting when looking for a day’s note outside of Obsidian - say, on mobile or via the file system.&lt;/p&gt;

&lt;p&gt;As of this writing, my template looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markdown"&gt;# Exercise

# Calendar

# Work

---
#dailynotes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I like logging my daily exercise. So that’s obvious. I tend to exercise first thing in the morning, so when I open this note, I log the workouts right away.&lt;/p&gt;

&lt;p&gt;The “Work” section is for stuff I did today that needs some context - beyond, say, what’s in my personal task manager. I often will have items here like “wrote some for the blog” or “talked to neighbor about the fence” just to tickle my brain when I come back to this file.&lt;/p&gt;

&lt;p&gt;The “Calendar” section is full of entries of the meetings I know I’m going to have, or if spontaneous ones happen, I add them, too. They look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-md"&gt;# Calendar

## 1100a Talk with [[Andy Nelson]]

## 0230p 1-1 with [[Kyle]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I will take bulleted list notes in these sections during the meeting if possible. And anything that I need to dump out of my brain after the meeting, I’ll flesh out the section.&lt;/p&gt;

&lt;p&gt;I talk about linking to people in &lt;a href="/one-on-one-notes"&gt;Obsidian 1-1’s&lt;/a&gt;.&lt;/p&gt;
</content>
    <published>2021-03-20T17:27:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Driven to Tests</title>
    <link href="https://dwf.bigpencil.net/driven-to-tests/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">TDD all the things!</summary>
    <content type="html">
&lt;hr /&gt;

&lt;p&gt;What are the signs that your software product team has experienced a big issue during development? Team velocity on new features has slowed down compared to earlier iterations. Tech debt is taking a long time to pay down. There’s a bug in production - or worse, some sort of production outage. How does your team adapt to the situation?&lt;/p&gt;

&lt;p&gt;No matter the cause, there is hard coding work ahead. You’re worried about the speed and effectiveness of the team as they work. And you want to finish the task with no risk to the rest of the product.&lt;/p&gt;

&lt;p&gt;Are your tests helpful in these stressful situations? Are they just a quality check before shipping? Or are they more integrated into your workflow? How can you increase velocity of new effort, bug fixing, and production fixes? And how can your test suite increase your confidence that recent work is correct while not exposing the rest of the product to risk? How can your test suite factor into Continuous Delivery?&lt;/p&gt;

&lt;p&gt;If these questions sound interesting, can I interest you in test-driven development?&lt;/p&gt;

&lt;h2&gt;Why Test First?&lt;/h2&gt;

&lt;p&gt;If you’ve never heard or seen test-driven development (TDD), it’s exactly what it sounds like. Developers write a test, run it to watch it fail, then write the implementation code to get the test to pass. Repeat.&lt;sup id="fnref:1" role="doc-noteref"&gt;&lt;a href="#fn:1" class="footnote" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Over time, these tests build into to a robust suite that provides your product with several benefits.&lt;/p&gt;

&lt;p&gt;First is the impact on the amount of implementation code. By writing only the code to make tests pass, you have “just enough implementation” - less code and less complicated code. The codebase will not have unused code paths cuttering developers’ editors and brains. Smaller, simpler code is easier to change in the future.&lt;/p&gt;

&lt;p&gt;Yes, there will be a lot of code written in &lt;em&gt;tests&lt;/em&gt;. Likely more than what you may have seen in a traditional automated test suite. But a passing TDD’d suite provides a higher sense of confidence than a typical test suite that the product will work as described. That confidence says that when the suite is passing, the team can ship that version of the product.&lt;/p&gt;

&lt;p&gt;The tests also allow for change in the future while maintaining that confidence. If tests are passing “near” the work a developer is doing, but failing elsewhere, that is very useful information. You know not to ship until the entire test suite is green. You know about a less obvious code depencency. This is handy when writing new code or fixing bugs. It is amazing when refactoring.&lt;/p&gt;

&lt;p&gt;Another benefit is useful documentation. Code documentation is often a separate effort, written after code is complete and shipped. Thus they tend to be, and stay, out of date. In a TDD project, the test suites have descriptive test names and clear implementation that tell the reader exactly how the code works. So the suite serves as documentation that is complete before any code is checked into version control. Test-suites-as-documentation are useful to teams immediately and they stay that way over time.&lt;/p&gt;

&lt;p&gt;It’s also possible to build a test suite that does even more. The &lt;a href="https://jasmine.github.io/tutorials/your_first_suite"&gt;Jasmine tutorial&lt;/a&gt; is end-user documentation that is also a test suite.&lt;sup id="fnref:2" role="doc-noteref"&gt;&lt;a href="#fn:2" class="footnote" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; This executable documentation has been part of Jasmine’s continuous integration process for years. Jasmine doesn’t ship without knowing that version works for anyone trying the tutorial.&lt;/p&gt;

&lt;h2&gt;What About Continuous Delivery?&lt;/h2&gt;

&lt;p&gt;That all sounds great. How does TDD relate to CD?&lt;/p&gt;

&lt;p&gt;If we go back to the metaphor of software development as manufacturing line (from &lt;a href="https://dwf.bigpencil.net/the-continuous-delivery-test/"&gt;The CD Test&lt;/a&gt;), then how does a test-driven suite help eliminate wasted effort and keep new software leaving the factory?&lt;/p&gt;

&lt;p&gt;New tests reduce effort by forcing you to express how code should work before you’ve written it. This is often easier than imagining the code that will accomplish the given task. It’s like a well-prepared grocery run. You leave home with a shopping list of ingredients grouped by the shops you need to visit to find them. Overall it is faster to do the work at hand.&lt;/p&gt;

&lt;p&gt;This is also true for production issues. Once you know how to reproduce a bug, and you express that bug in a new test, it becomes straightforward to solve. The bug may still be complex to fix, but you will know where to start and when you’re done. That test then stays in the suite as long as necessary, preventing regression.&lt;/p&gt;

&lt;p&gt;Existing tests do even more to keep team momentum high. Revisiting old code, whether to fix bugs, refactor, or add new functionality, often has a high start-up cost. Reading old code to understand how it works, and why, takes more time the longer its been since you visited that code. But with a test-driven suite, that effort is lower. The how and why is documented right there. If your team is growing, new developers can get oriented just by reading the tests and following the implementation as needed, building concrete understanding of the system. The test suite becomes a knowlege refresher and accelerator for anyone on the team.&lt;/p&gt;

&lt;p&gt;Going back to the CD analogy of the manufacturing line, a failing test is like an &lt;a href="https://en.wikipedia.org/wiki/Andon_(manufacturing)"&gt;Andon cord&lt;/a&gt;. If there is a failing test in your suite, the product should not ship. The team needs to write code to get all the tests passing again. And once all the tests are green, the manufacturing line can continue. A test suite that is passing and stays passing by default increases the overall confidence in the product.&lt;/p&gt;

&lt;p&gt;A test-driven suite removes waste and inefficiencies from the software development process.  That leads to getting the team into a regular cadence of releases. And that gives you the benefits you want of Continuous Delivery.&lt;/p&gt;

&lt;h2&gt;Start by Starting&lt;/h2&gt;

&lt;p&gt;Getting started is easy. It is as simple as writing code in the “test, fail, implement, pass” pattern. And playing with some refactoring along the way. &lt;em&gt;Where&lt;/em&gt; to start is harder.&lt;/p&gt;

&lt;p&gt;If you’re a book person, Kent Beck’s &lt;a href="https://amzn.to/3sYihAu"&gt;TDD By Example&lt;/a&gt; is great. If you’re a tutorial type, take a look at James Shore’s &lt;a href="https://www.jamesshore.com/v2/projects/lets-play-tdd"&gt;Let’s Play&lt;/a&gt; casts. If you’re a doc-crawler, try Test Double’s &lt;a href="https://github.com/testdouble/contributing-tests/wiki"&gt;TDD wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If it feels too daunting to start with your product code base, try smaller, isolated problems. There are plenty of TDD exercizes out there (including the Test Double wiki above). Or you can pick up something like &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;, which has fun problems with test data and test answers. When comfortable with your new habits, take them back to your product development.&lt;/p&gt;

&lt;p&gt;Justin says in his post &lt;a href="https://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd/"&gt;The Failures of “Intro to TDD”&lt;/a&gt;, early experience will teach you the mechanics. But like any new craft you need lots of practice to get smooth and maximize the benefits. With time, experience, and research you will see TDD as more of a &lt;a href="https://threadreaderapp.com/thread/1335623514959777795.html"&gt;design technique&lt;/a&gt; (ps: follow &lt;a href="https://twitter.com/geepawhill"&gt;@GeePawHill&lt;/a&gt;). Your tests and code will get even better.&lt;/p&gt;

&lt;h2&gt;Isn’t this Expensive?&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/"&gt;Joel Test&lt;/a&gt;, he talks about having dedicated testers for a software team (he expands on this in a &lt;a href="https://www.joelonsoftware.com/2000/04/30/top-five-wrong-reasons-you-dont-have-testers/"&gt;later post&lt;/a&gt;). He points out that not having testers in 2000 was a false economy. Finding issues, bugs, and feature gaps earlier in the development process was, and is still, less expensive than letting users find them for you.&lt;/p&gt;

&lt;p&gt;Twenty years on, more and more testing is done with code. These tests are repeatable and essential to your product. Moving to test-driven development provides even more benefits. It is an investment in your product that results in lower costs in code design, higher team productivity, and fewer bugs for your customers. When it comes to Continuous Delivery, it can increase the momentum of the team, making it easier to ship early and often.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class="footnotes" role="doc-endnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1" role="doc-endnote"&gt;
      &lt;p&gt;If this is hard to imagine, &lt;a href="https://medium.com/@dagmaraszkurat"&gt;Dagmara Szkurłat’s&lt;/a&gt; wrote a fun &lt;a href="https://medium.com/@dagmaraszkurat/how-i-explained-tdd-to-a-non-developer-friend-and-got-a-job-offer-over-tacos-b881895182c5"&gt;real-world analogy&lt;/a&gt; that is a good next stop. &lt;a href="#fnref:1" class="reversefootnote" role="doc-backlink"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2" role="doc-endnote"&gt;
      &lt;p&gt;Thanks to &lt;a href="https://twitter.com/mjackson"&gt;Michael Jackson&lt;/a&gt; who suggested this at the speakers’ summit prior to the first Fluent Conf in 2012. &lt;a href="#fnref:2" class="reversefootnote" role="doc-backlink"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2021-02-02T13:53:00-08:00</published>
    <updated>2023-10-06T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Start with Retrospectives</title>
    <link href="https://dwf.bigpencil.net/start-with-retrospectives/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Every team improvement journey starts with a retro.</summary>
    <content type="html">
&lt;p&gt;You have read &lt;a href="https://dwf.bigpencil.net/series/the-cd-test/"&gt;The CD Test&lt;/a&gt; and it resonates with you. Continuous Delivery sounds great as a concept. Your team is doing some of these practices, but not all.  Your list of questions with “no” answers sounds like a good to do list. You know that changing how the team works could improve the team’s momentum. That means shipping new features to your customers more often. And that means increasing business value of your product smoothly and steadily.&lt;/p&gt;

&lt;p&gt;But there are many unknowns. You’re not sure how other team members feel about the state of the team, the current process, and how work is shipping to customers. You’ve heard the phrase Continuous Delivery in passing, but the team has not talked about how it could apply. Or if it should. You don’t know how your team moving to CD would affect other teams. You aren’t familiar with each team member’s goals or needs, and how any changes to how they work would affect them. Continuous Delivery means change. And you don’t know how willing your team is to embrace change.&lt;/p&gt;

&lt;p&gt;How can you align your team around the need for change, build a culture of process adaptation, and improve your CD Test score? The short answer is another CD Test item - the Retrospective. Let’s talk about how to use retros to build this culture in your team.&lt;/p&gt;

&lt;h2&gt;Retrospectives&lt;/h2&gt;

&lt;p&gt;First, a quick intro to (or refresher about) &lt;a href="https://www.agilealliance.org/glossary/heartbeat-retrospective/"&gt;retrospectives&lt;/a&gt;. A retro is a meeting where the team reflects on their team’s “story so far.” It is a time to talk about what is working and find ways to amplify that strength. Or it’s a time to talk about what is &lt;em&gt;not&lt;/em&gt; working, rank the problems’ importance, and suggest fixes.&lt;/p&gt;

&lt;p&gt;If your team does not have regular retrospectives, &lt;a href="https://tanzu.vmware.com/content/blog/how-to-run-a-really-good-retrospective"&gt;Nicola Rushton’s quick start guide&lt;/a&gt; is a great introduction. The book &lt;a href="https://amzn.to/38TKWiq"&gt;Agile Retrospectives&lt;/a&gt; is full of more advanced retro topics. It has good discussions on how to set the team’s expectations for the meetings, how to facilitate well, and how to process the outcomes. There are also mini-discussions of different retro types and their preparation activities.&lt;/p&gt;

&lt;p&gt;As the team builds a set of good retro habits, there will be challenges. Not everyone will want to share their feelings. People avoid talking about hard problems. You may get surprised when a retro uncovers a problem you didn’t realize you had. And there are often initial retros when nobody wants to say anything out of fear or discomfort.&lt;/p&gt;

&lt;p&gt;There is no shortage of tips for dealing with common retro problems. How do you &lt;a href="https://www.funretrospectives.com/candy-love/"&gt;help people become more comfortable with talking&lt;/a&gt;? How do you &lt;a href="https://spin.atomicobject.com/2014/04/07/improve-retrospective/"&gt;talk through the hardest discussions&lt;/a&gt;? Or how to combat more &lt;a href="https://www.mountaingoatsoftware.com/blog/overcoming-four-common-problems-with-retrospectives"&gt;general problems&lt;/a&gt;? Work through these together and the team will build trust.&lt;/p&gt;

&lt;p&gt;Once your team is experienced and comfortable with retrospectives, what’s next on your CD journey? It’s introducing a new mindset about how the team works.&lt;/p&gt;

&lt;h2&gt;Process as Product&lt;/h2&gt;

&lt;p&gt;A software team’s development process is as much a product of their work as what they build for their customers. The process is a set of features - design, planning, implementation, deployment - that the team uses to build business value. Like any product there can be bugs, new features, or performance problems. Development tools can change or break. Staffing changes when someone new starts or a veteran leaves. Test runtimes or validation cycles grow too long and features are not shipping on time. Business realities determine new software work for the team. And team realities can suggest process improvements and adaptations.&lt;/p&gt;

&lt;p&gt;How would your team receive this idea of “process as product?” Does the team have a similar shared value of continuous improvement? Would they be able to review the CD Test questions together, discuss opportunities, and prioritize any process changes?&lt;/p&gt;

&lt;p&gt;Or is this a new concept for the team, just beginning to consider spending effort on their process? Are team members willing to discuss things that are working, and those that aren’t? Are they willing to use those topics as leverage to make the team happier and more productive?&lt;/p&gt;

&lt;p&gt;A retrospective focused on sharing this idea, building alignment across the team, and planning process changes will help any team no matter how familiar they are with the concept.&lt;/p&gt;

&lt;h2&gt;A Retrospective for Alignment&lt;/h2&gt;

&lt;p&gt;Most retro guides talk about having a prompted or focused retro. There are many agendas to choose from (again, see &lt;a href="https://amzn.to/38TKWiq"&gt;Agile Retrospectives&lt;/a&gt; for some options). A good choice for alignment building is the &lt;a href="https://www.funretrospectives.com/the-catapult/"&gt;“Catapult”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This retro scenario introduces the metaphor of using a catapult to fling yourself over a mountain to a destination. You draw the catapult, the mountain, and the destination all on your whiteboard.&lt;/p&gt;

&lt;p&gt;(If you don’t like the idea of being flung over a mountain, there are different options. &lt;a href="https://www.pagerduty.com/blog/4-step-agile-sailboat-retrospective/"&gt;The Sailboat&lt;/a&gt;, &lt;a href="https://www.funretrospectives.com/hot-air-balloon-bad-weather/"&gt;The Balloon&lt;/a&gt;, and &lt;a href="https://retrospectivewiki.org/index.php?title=Mountain_Hiking"&gt;The Mountain Hiker&lt;/a&gt; are similar agendas that will work just as well.)&lt;/p&gt;

&lt;p&gt;You discuss your current state. How is the team working today? How have you met team goals? How have you met product and business goals? Each key point gets a sticky note and goes near the catapult. Next, you discuss your desired, future state. What new product features are coming? And what business goals will they help achieve? Again, key points get stickies and goes to the board. The discussion here is important. You are building alignment about today and tomorrow.&lt;/p&gt;

&lt;p&gt;Once there is alignment, the team lists the risks and challenges that could slow or prevent the journey. These stickies go on the mountain. Then list the helpers or boosters on stickies and put them “over” the mountain. At the end of the exercise, the team should have a shared understanding and a list of process changes (or next steps) for its CD journey.&lt;/p&gt;

&lt;p&gt;Schedule this retro as part of the next release kickoff meeting or quarterly review. Find an experienced outside facilitator. Work with them on how best to introduce “process as product” and develop alignment around the concepts. A more aware team may be fine with Continuous Delivery as the desired state. A team which is earlier in their reflective journey may take better to CD ideas as part of the solutions to the agreed challenges. Lean on your facilitator for help navigating this space.&lt;/p&gt;

&lt;p&gt;By the end of the retro you should have a good sense of your team’s concerns about the future, what they see as challenges, and their appetite for change. From here, you should be able to build a better team, process, and product.&lt;/p&gt;

&lt;h2&gt;Building a Retro Habit&lt;/h2&gt;

&lt;p&gt;Your team now has (even more) experience with retrospectives. And you have at least some team alignment about the process being a product that can get better with iteration. Harness this momentum and make your retros weekly. Keep the discussion and experimentation going.&lt;/p&gt;

&lt;p&gt;Keep weekly retros on the team calendar. Introduce more concepts from Continuous Delivery as prompts for discussion. Or suggest them as potential solutions to the problems the team discusses.  Process through the artifacts from your Catapult retro. Use different retro formats and new prompts to keep retros lively. Show the team that working together means talking about working even better than they are today.&lt;/p&gt;

&lt;p&gt;Retrospectives are the foundation for any great team. They build trust. They surface issues when they are painful. And they allow a team to improve continuously as they deliver continuously.&lt;/p&gt;

</content>
    <published>2020-11-29T16:00:00-08:00</published>
    <updated>2023-09-18T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>The Name Game</title>
    <link href="https://dwf.bigpencil.net/the-name-game/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">My contribution to this 'what you call me' meme from 2020.</summary>
    <content type="html">&lt;p&gt;&lt;em&gt;From the “Can you pronounce my name” game/meme from Twitter early fall, 2020. I love this one.&lt;/em&gt; —dwf&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Davis:&lt;/strong&gt; 10/10 All day&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;David (if &lt;em&gt;your&lt;/em&gt; name is David):&lt;/strong&gt;  9/10 You’ll get it&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;David (1st time):&lt;/strong&gt; 5/10 Likely a typo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;David (&amp;gt;2nd time):&lt;/strong&gt; 2/10&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frank:&lt;/strong&gt; 0/10 There is no comma in my name&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; 6/10 But it’s never stuck&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D:&lt;/strong&gt;  2/10 Do I know you?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DWF (rhymes with “woof”):&lt;/strong&gt; 12/10 💪 I have cooked for you&lt;/p&gt;
</content>
    <published>2020-11-21T16:20:00-08:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Introducing The Continuous Delivery Test</title>
    <link href="https://dwf.bigpencil.net/the-continuous-delivery-test/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html"/>
    <content type="html">
&lt;p&gt;&lt;em&gt;The spice must flow…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Frank Slootman’s &lt;em&gt;&lt;a href="https://www.linkedin.com/pulse/amp-up-frank-slootman/"&gt;Amp It Up&lt;/a&gt;&lt;/em&gt; advocates removing “slack” (the concept, not the app) from a team to get greatest productivity. There’s pushback that this approach is toxic and/or it leads to colossal burnout. I agree. Low slack is not the same as high productivity. &lt;a href="https://twitter.com/fnthawar/"&gt;Farhan Thawar&lt;/a&gt; shared &lt;a href="https://twitter.com/fnthawar/status/1314902602509938688"&gt;a list of characteristics or practices&lt;/a&gt; that lead to productive teams. I like this list a lot.&lt;/p&gt;

&lt;p&gt;I like his list no doubt because Farhan and I both used to work at Pivotal Labs. But I’d like to take a different approach to talking about software team productivity.&lt;/p&gt;

&lt;p&gt;Instead of focusing on removing slack from a team, the best way to make a team productive is &lt;a href="https://continuousdelivery.com/"&gt;Continuous Delivery&lt;/a&gt;. That is, setting the team up such that new work is flowing from concept to development to production smoothly and often. There is continuous delivery of value to customers. When work ships, it works as expected, it’s reliable, and there is little re-work. The team, by default, is always looking forward to the next new value they can be delivering. There is a low amount of waste during development. When there is waste, the team adapts to remove it.&lt;/p&gt;

&lt;p&gt;A Continuous Delivery team looks much like a modern physical goods manufacturing line. From the outside it looks like requirements go in and work - features and fixes - come of out the other side. Inside there are conscientious workers, well-maintained machines, and low inventory. People are improving their workflows for higher efficiency. When there are problems, Andon cords get pulled, and the team stops to fix them. A high functioning CD team has high productivity with low stress. And they are improving themselves all the time.&lt;/p&gt;

&lt;p&gt;How close is your team to this ideal?&lt;/p&gt;

&lt;p&gt;Joel Spolksy gave us the &lt;a href="https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/"&gt;Joel Test&lt;/a&gt; for evaluating software teams 20 years ago. It is still relevant, but this test is of a time of shrink-wrapped, desktop software. Bug databases and source control have become defaults. Most software is web-deployed applications and services.&lt;/p&gt;

&lt;p&gt;With apologies to and inspiration from Joel, I give you &lt;em&gt;The CD Test&lt;/em&gt; — a list of simple yes/no questions to check your team. The score is the sum of yes answers. A high score doesn’t mean your team is perfect at Continuous Delivery. But if you review your “no” answers I’m sure you’ll find discussion points for improving your team. Here goes…&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;The Continuous Delivery Test&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Does the team have a single product owner?&lt;/li&gt;
  &lt;li&gt;Is there a single backlog of stories, stack ranked in priority order?&lt;/li&gt;
  &lt;li&gt;Does the team have weekly planning meetings to review the backlog?&lt;/li&gt;
  &lt;li&gt;Are stories completed in a day or two?&lt;/li&gt;
  &lt;li&gt;Do developers take the next story from the top of this backlog?&lt;/li&gt;
  &lt;li&gt;Do developers test-drive their code?&lt;/li&gt;
  &lt;li&gt;Is the test suite fast enough that you don’t complain about them?&lt;/li&gt;
  &lt;li&gt;Is there a Continuous Integration system that runs on every commit?&lt;/li&gt;
  &lt;li&gt;Does every CI green build get deployed?&lt;/li&gt;
  &lt;li&gt;Does the Product Owner accept work by exercising it in the product and with low latency?&lt;/li&gt;
  &lt;li&gt;Is it simple and “low drama” to make a production deployment?&lt;/li&gt;
  &lt;li&gt;Do features make it to production frequently?&lt;/li&gt;
  &lt;li&gt;Does the team have daily stand-ups, with a goal of communicating change and unblocking issues?&lt;/li&gt;
  &lt;li&gt;Do people work on one project at a time?&lt;/li&gt;
  &lt;li&gt;Is it easy for developers to move between teams?&lt;/li&gt;
  &lt;li&gt;Are teams composed of team members of diverse skill levels?&lt;/li&gt;
  &lt;li&gt;Is asking for help, thus leading to knowledge acquisition, seen as a strength?&lt;/li&gt;
  &lt;li&gt;Is Quality an exploratory function (and not a gatekeeper to release)?&lt;/li&gt;
  &lt;li&gt;Does the team meet weekly for Retrospectives to discuss team issues, leading to new work that improves team progress?&lt;/li&gt;
  &lt;li&gt;Does the team complete their action items from Retrospectives?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2&gt;Does the team have a single product owner?&lt;/h2&gt;

&lt;p&gt;Somebody has to be The Decider. For CD teams, this is the Product Owner (or Product Manager). Everyone from customer support to leadership should be making their requests for new work. But the Product Owner needs to be the  Decider. The Product Owner takes all this input and prioritizes it in the backlog. There will always be give and take on work priority - that is healthy. Often this means deciding what &lt;em&gt;doesn’t&lt;/em&gt; get done. Too many cooks spoil the broth and too many stakeholders distracts a team.&lt;/p&gt;

&lt;h2&gt;Is there a single backlog of stories, stack ranked in priority order?&lt;/h2&gt;

&lt;p&gt;If work definition lives across many pieces of software and many people’s brains, how does the team know what they should be working on? Once the Product Owner decides and prioritizes work, and the development team estimates it, this needs to be communicated. There should be a single, team-visible, stack-ranked backlog of work to do. Each piece of work - ok, I’ll call them stories. Each &lt;em&gt;story&lt;/em&gt; should have enough information so that work can start.&lt;/p&gt;

&lt;p&gt;Each story should include use cases, acceptance criteria, estimates, design artifacts, and implementation ideas.  The key is to put it all in one place with clear priority order. This makes it easy for the team to pick up the next work to do.&lt;/p&gt;

&lt;h2&gt;Does the team have weekly planning meetings to review the backlog?&lt;/h2&gt;

&lt;p&gt;The world around your product is changing all the time. The Product Owner needs to share these changes and how they affect the upcoming work. The rest of the team needs to digest and contribute their views to team understanding. The team needs to review designs and estimate implementation. This helps the team increase their shared understanding of the product. And it helps the Product Owner change priorities. Having this meeting weekly allows everyone to make small corrections and stay productive.&lt;/p&gt;

&lt;h2&gt;Are stories completed in a day or two?&lt;/h2&gt;

&lt;p&gt;Long stories take a lot of time to understand, design, and implement. They seem perpetually “almost done.” The work is not yet available to verify and not yet in front of users. Some of the team is working on them and nothing else. Nobody is happy.&lt;/p&gt;

&lt;p&gt;Keeping stories small enough to complete in a day or two is the antidote to this problem. The stories are often simpler, making them easier to complete. It is easier for the Product Owner to verify smaller pieces of work, thus confirming progress. The team will build a sense of progress and maintain it. And customers will get more value more quickly.&lt;/p&gt;

&lt;h2&gt;Do developers take the next story from the top of the backlog?&lt;/h2&gt;

&lt;p&gt;When a developer completes a story, how do they decide what work is next? If developers aren’t getting their work from the Product Owner, what are they working on? Any other source of work and there is a high risk that it’s not the next most important work to provide user value. And there is &lt;em&gt;very&lt;/em&gt; high risk that this other work could provide little value to the product.&lt;/p&gt;

&lt;p&gt;If the backlog is well prioritized and well understood, then the next piece of work is obvious. This keeps the team moving forward in a uniform way.&lt;/p&gt;

&lt;h2&gt;Do developers test-drive their code?&lt;/h2&gt;

&lt;p&gt;Writing tests for code has become common. Test code has become part of the product. Writing tests that run several times a day helps find bugs early where and when they are cheapest to fix. Joel was spot-on for this one.&lt;/p&gt;

&lt;p&gt;But writing tests first is even better. It helps the team write only the code they need to finish a story. This means less waste in the development process. It also increases test coverage because tests define which code gets written. It will be easier to find bugs later when refactoring or when dependent code changes. And in another nod to Joel, well written tests are &lt;em&gt;even better&lt;/em&gt; than product specs. They tell “you in the future” how the code actually works.&lt;/p&gt;

&lt;h2&gt;Is the test suite fast enough that you don’t complain about it?&lt;/h2&gt;

&lt;p&gt;If the test suite is too slow, then development will be slow. The team will tend to run it less often, lengthening the feedback loop when they add new code. Or even worse, if the test suite takes too long to run the information it provides will be less relevant. You want a test suite and you want to run it often. So keep it fast.&lt;/p&gt;

&lt;p&gt;The team can keep their test suites fast with several techniques. They can reduce over-testing (hitting the same code over and over again). They can write only enough tests to keep confidence in the product high. They can parallelize tests. They can use the best hardware. They can limit testing external dependencies (e.g., external API’s). And since test code is product code, developers can refactor it as needed to keep performance at peak.&lt;/p&gt;

&lt;h2&gt;Is there a Continuous Integration system that runs on every commit?&lt;/h2&gt;

&lt;p&gt;Even today “it works on my machine” is still a problem. There can be accidental inconsistencies between development systems and production environments.  Developers can be working on semi-conflicting changes without realizing it. The product can be working, with test suites passing on one developer’s machine. But that same work could fail shortly after check-in.&lt;/p&gt;

&lt;p&gt;Continuous Integration (CI) takes every code commit, integrates the changes, and runs the full test suite. A “green build” means there are no conflicts. This means work can continue. When there are errors, the developers can fix them right away, dropping new work to fix the build. CI keeps the team flowing, preventing some bugs from making it to production.&lt;/p&gt;

&lt;h2&gt;Does every CI green build get deployed?&lt;/h2&gt;

&lt;p&gt;A green CI build tells that the team that the product currently works as expected. It should “ship” to a deployment immediately for review. A team which is deploying every green CI build is acting in the spirit of The Joel Test’s daily builds. Less complicated products might do this on a staging deployment. More complicated products may deploy to production, but with feature flags. This prevents users from using new work before validation.&lt;/p&gt;

&lt;p&gt;It does not matter where the green build deploys. Regular deployment shows that the team knows how to build regularly and repeatedly. They find issues early. “Early” means after the tests have passed, but before users can exercise it.&lt;/p&gt;

&lt;h2&gt;Does the Product Owner accept work by exercising it in the product and with low latency?&lt;/h2&gt;

&lt;p&gt;A test suite tells everyone the current status of the product. CI will catch integration problems, broken features, or bug regressions. But what about that status of new work?&lt;/p&gt;

&lt;p&gt;New work should only ship to production when the Product Manager approves it. A staging deployment that has the latest green build of the product enables them to review new work. This is the opportunity to tell developers, “Great work! Let’s get it in front of users,” or, “Oops. This doesn’t work as we discussed. Let’s try again.”&lt;/p&gt;

&lt;p&gt;If the Product Owner is reviewing work early and often, it keeps the feedback loops short. Ideally they are validating new work daily. Fixing bugs and problems can happen more quickly. Or, if the work is as desired, the Product Owner can plan for how to get this new work to production and to users.&lt;/p&gt;

&lt;h2&gt;Is it simple and “low drama” to make a production deployment?&lt;/h2&gt;

&lt;p&gt;Getting new work to users is one of the most important things a product team can do. It is often one of the most fragile processes: too flaky, too manual, and resulting in extra hours worked.&lt;/p&gt;

&lt;p&gt;Instead, teams should treat deployment like a feature of the product. The Product Owner puts deployment stories in the backlog. Development implements them. The product ships to staging and production often. Changes in deployment, like changes in infrastructure or a database upgrade, suggest new stories in the backlog. Deployment is then simple, reliable, automated, and predictable. Customers get their new features consistently. And the team can go home on time.&lt;/p&gt;

&lt;h2&gt;Do features make it to production frequently (&amp;gt; 1x every 3 mo)? &lt;/h2&gt;

&lt;p&gt;Shipping work to customers is important. It should happen often. Completed work that is not yet in production is potential waste. Without feedback from users you don’t know if the work was valuable. Any time that features “sit on the shelf” is time that a competitor could be using to take your customers.&lt;/p&gt;

&lt;p&gt;As soon as a feature, or set of features, is practical for users to exercise it should get deployed to production. CD teams aim for deploying to production about once a week. This keeps feedback loops short and tight, delivering value to customers sooner. It also makes it easier for your developers to make changes when there is a bug.&lt;/p&gt;

&lt;p&gt;For some products this is hard or seemingly impossible. Teams should drive to the highest frequency possible for their situation.&lt;/p&gt;

&lt;h2&gt;Does the team have daily stand-ups, with a goal of communicating change and unblocking issues?&lt;/h2&gt;

&lt;p&gt;Standups have become popular. They can add a lot of value to keep the team up to date. But they can also devolve into long, meandering status reports. Team members zone out, get distracted, and start to complain at retrospectives.&lt;/p&gt;

&lt;p&gt;The most effective standups aren’t &lt;em&gt;just&lt;/em&gt; quick. They focus on new information. They review changes to the backlog or the business. They discuss important external items (e.g., interview schedules, upcoming vacations). And they stay short.&lt;/p&gt;

&lt;p&gt;Standup is a vital opportunity to ask the entire team for help. Using the team’s collective knowledge is good way to unblock hard problems. Unblocking progress is an essential step for a productive day.&lt;/p&gt;

&lt;h2&gt;Do people work on one project at a time?&lt;/h2&gt;

&lt;p&gt;Splitting a person across multiple projects is a distraction waiting to happen. Humans are poor at multi-tasking and at adjusting expectations based on task splitting. Letting team members work on many projects at once adds task-switching costs to a project. This is waste. It may speed one team up, but will slow down the others others.&lt;/p&gt;

&lt;p&gt;Keeping people working on a single team at a time allows for focus. Focus leads to personal flow. Personal flow leads to team flow. And team flow leads to getting new business value to customers.&lt;/p&gt;

&lt;h2&gt;Is it easy for developers to move between teams?&lt;/h2&gt;

&lt;p&gt;If your company is only one team right now, this will not apply. But any larger organization often splits into many, smaller teams. Keeping these teams siloed from each other can slow a product down. Or worse, it can slow the entire company down. Information and expertise stays locked up, reducing organization flexibility. This will slow down all the teams.&lt;/p&gt;

&lt;p&gt;Allowing and encouraging team member rotation keeps the organization flexible. Information, knowledge, and techniques will propagate around the organization. When one team is behind, managers can reallocate people to catch them up. And all the while everyone will learn.&lt;/p&gt;

&lt;h2&gt;Are teams composed of team members of diverse skill levels?&lt;/h2&gt;

&lt;p&gt;Show me a “10x Engineer” and I’ll show you a single point of failure. What happens when that engineer feels burned out? Or if they have a new work opportunity or a life change? Or if they go on vacation? Single points of failure put entire businesses at risk.&lt;/p&gt;

&lt;p&gt;The alternative is to have teams with diverse sets of experience levels. Have the senior people teach the junior people. That turns them into senior people. A team where everyone is learning all the time is a happy team. And happy, knowledgable people do great work. They mitigate risk. They also spot problems and fix them. They keep the product at high quality and shipping.&lt;/p&gt;

&lt;h2&gt;Is asking for help, thus leading to knowledge acquisition, seen as a strength?&lt;/h2&gt;

&lt;p&gt;It is not enough to put junior and senior people together on teams. If the junior people do not feel welcome and safe to ask questions, then they will never gain knowledge. This is a risk to your business and your team will work more slowly in the long term.&lt;/p&gt;

&lt;p&gt;Hire people who are good at acquiring knowledge. Put them on teams that will immerse them in knowledge and help them apply it. Give the “junior” folks the opportunity to try and fail. Celebrate asking questions. Encourage this behavior at all levels. These teams will grow and evolve over time into productive engines for your product.&lt;/p&gt;

&lt;h2&gt;Is Quality an exploratory function (and not a gatekeeper to release)?&lt;/h2&gt;

&lt;p&gt;If your team is waiting for a QA team to tell you the product is ready, you have already lost. Features and bug fixes alike will sit in the queue to production. Everyone will be waiting for some absolute level of confidence that can never come. Meanwhile, your customers are waiting.&lt;/p&gt;

&lt;p&gt;Moving the testing “left,” closer to your developers, makes it cheaper to find and fix bugs. A good test suite tells you all you need to know about the functionality of the product. The Product Owner should be able to use the product to decide that work is ready.&lt;/p&gt;

&lt;p&gt;“But what about bugs?” Instead of worrying about bugs, think about Exploratory QA. Have people who use the product and find behavior that the team did not expect or test for. Sometimes these are bugs where the product is broken. Sometimes these are new use cases the team missed. Learn more by reading Elisabeth Hendrickson’s &lt;a href="https://amzn.to/2HdUWrs"&gt;Explore It!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fixing this behavior is then new work for Product Manager to consider for the backlog. And like any story in the backlog, it starts with a test. And that test ensures a fix or feature that should never regress.&lt;/p&gt;

&lt;h2&gt;Does the team meet weekly for Retrospectives to discuss team issues, leading to new work that improves team progress?&lt;/h2&gt;

&lt;p&gt;Problems, issues, and inefficiencies occur naturally on all teams. Things that worked when the team was small start to fail as the team grows. Technology choices don’t pan out. Experiments in process change fail. And there are countless other scenarios.&lt;/p&gt;

&lt;p&gt;Some process, techniques, and behaviors are the opposite. They work very well, solving problems and making the team stronger. They should be recognized and further promoted.&lt;/p&gt;

&lt;p&gt;A weekly &lt;a href="https://www.agilealliance.org/glossary/heartbeat-retrospective/"&gt;retrospective&lt;/a&gt; helps a team identify both problems and successes.&lt;/p&gt;

&lt;p&gt;Teams should celebrate every win. This makes team members feel good about their work. It cements good patterns for potential reuse.&lt;/p&gt;

&lt;p&gt;Discussing problems also has many good effects on the team. Everyone gets on the same page. It vents frustration and surfaces anxiety. They can discussion potential solutions, building consensus on which ones to attempt. And they can track action items to implement them.&lt;/p&gt;

&lt;h2&gt;Does the team complete their action items from Retrospectives?&lt;/h2&gt;

&lt;p&gt;It’s not enough to talk about problems at a retrospective. The team has to suggest and agree on solutions. Then they need to track action items for their implementation. This means having the action items be clear. And each must have an owner and a due date.&lt;/p&gt;

&lt;p&gt;The team should review the open action items at the beginning of each retro. This serves as a reminder to the owners. They are helping the team fix a problem and making everyone more productive and happy. When an action item is complete, the team should celebrate!&lt;/p&gt;

</content>
    <published>2020-11-04T16:00:00-08:00</published>
    <updated>2023-09-18T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>COVID-19-Inspired Meal Planning</title>
    <link href="https://dwf.bigpencil.net/covid-19-inspired-meal-planning/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">How I experimented to make weekly meal planning work well for our family.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;Originally published as a &lt;a href="https://twitter.com/dwfrank/status/1297643495897706496"&gt;tweetstorm&lt;/a&gt;, I expanded this one a little to make it more blog-worthy.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;—dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We cook a lot at our house. We see cooking as a life skill and family activity. Being at home full time means we have a little bit more time to cook things well. Excellent!&lt;/p&gt;

&lt;p&gt;We mix in some local favorite restaurants  - after all, we want them to be open post-Covid - but there are problems.&lt;/p&gt;

&lt;p&gt;Meal planning is still meal planning. It’s a bit of a chore. And it’s very easy for someone to complain about repetition, or general lack of variety. What are we to do??&lt;/p&gt;

&lt;p&gt;Welcome to &lt;em&gt;How we plan home meals: A software story.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Problems to Solve&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;What are we meals are eating this week?&lt;/li&gt;
  &lt;li&gt;Where should we take out from tonight?&lt;/li&gt;
  &lt;li&gt;What recipes/restaurants do we like? And not like?&lt;/li&gt;
  &lt;li&gt;How can we reduce repetition of meals/restaurants? (We like variety!)&lt;/li&gt;
  &lt;li&gt;How can we minimize time spent menu planning or choosing a restaurant?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Iteration 1: Spreadsheet&lt;/h2&gt;

&lt;p&gt;Duh.&lt;/p&gt;

&lt;p&gt;In April I started a spreadsheet with one night per row, recording the date, the recipe, a link to the recipe, and if we liked it. If we brought in from a restaurant, we recorded the restaurant and a link to their menu.&lt;/p&gt;

&lt;p&gt;This was just simple columns. I did some conditional formatting for restaurants vs. home-cooked. But nothing more than this.&lt;/p&gt;

&lt;p&gt;When it was time to plan food for the week, I’d look over the sheet and pick 4 or 5 meals, prioritizing time since last cooked. I’d add 1 or 2 new recipes each week (from various sources online).&lt;/p&gt;

&lt;p&gt;Similar to recipes, when we decided we wanted to eat out, we’d look at the top of the sheet and look for restaurants we’d not visited in a while.&lt;/p&gt;

&lt;p&gt;This solved most of these problems, but the planning time could have been better.&lt;/p&gt;

&lt;h2&gt;Problems to Solve&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We were guessing on age since last cooked or last visited. This was not calculated.&lt;/li&gt;
  &lt;li&gt;We were not counting the # of times cooked/visited.&lt;/li&gt;
  &lt;li&gt;Scrolling up and down spreadsheet rows make it hard to see history.&lt;/li&gt;
  &lt;li&gt;We discovered we would like to rate recipes and restaurants - we wanted to be able to choose not just based on most-recently-eaten&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Iteration 2: AirTable&lt;/h2&gt;

&lt;p&gt;People had been suggesting AirTable for a while - the “NEVER use a spreadsheet to solve a software problem” crowd. 🙄&lt;/p&gt;

&lt;p&gt;I definitely have built my share of spreadsheets that slowly acrete functions, and SQL-esque queries, and yes, even JavaScript. And I also hate myself. And the [sunk-cost fallacy][sunk].&lt;/p&gt;

&lt;p&gt;Spreadsheets are great. Until they aren’t. Which meant for iteration 2, I was going to try AirTable.&lt;/p&gt;

&lt;p&gt;Here’s a rough sketch of the implementation. I tweaked it regularly to refine, but here’s where we are today.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;3 Tables&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restaurants: Name, Rating (1-3 stars), Notes, Count of times linked to Meal, Roll-up to get most-recent-visit&lt;/li&gt;
  &lt;li&gt;Recipes: Name, Rating (1-3 stars), Web Link, Notes, Count of times linked to Meal, Roll-up to get most-recent-visit&lt;/li&gt;
  &lt;li&gt;Meals: Date, link to Recipe (can be multiple), Link to Restaurant (can be multiple)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A Meal is something we ate on a specific date - really just a join, but AirTable calls them “links”. Each day can have multiple meals and/or restaurants.&lt;/p&gt;

&lt;p&gt;AirTable has &lt;em&gt;Views&lt;/em&gt;, which are sort of like database views. But they are also the visual UI for working with a given table.&lt;/p&gt;

&lt;p&gt;Meals has a Calendar view. This is amazingly cool for planning. Meals has a web form for recording what/where we ate when, complete with calendar widget. Restaurants &amp;amp; Recipes each has a web form for a new record.&lt;/p&gt;

&lt;p&gt;Restaurants &amp;amp; Recipes each has a “Choice View” that sorts first by least-recent-meal (ascending “roll-up” by date), then by rating (descending star count).&lt;/p&gt;

&lt;p&gt;All views hide any extra fields that don’t help with the interaction at hand.&lt;/p&gt;

&lt;h2&gt;Restaurants vs. Recipes&lt;/h2&gt;

&lt;p&gt;We wanted to be able to tell when a meal was home-cooked or a restaurant visit. The idea was to be able to scan and see how much we were eating out.&lt;/p&gt;

&lt;p&gt;So the “name” field on Restaurants is now a formula that prepends 🍱 to every restaurant name. It’s now very easy to scan the calendar. Unicode FTW!&lt;/p&gt;

&lt;h2&gt;Multiple Meals in a Night&lt;/h2&gt;

&lt;p&gt;One night we couldn’t decide on a pizzeria. It was getting knock-down, drag out. So we ordered from both. Another night the kids wanted to make a Taco Bell run. So my wife and I decided to cook something we knew they hated.&lt;/p&gt;

&lt;p&gt;AirTable allows for multiple links to the same date. Meals now allow multiple-links records to Restaurants &amp;amp; Recipes. This gave us the bonus of being able to start tracking multiple side dishes on cooking nights.&lt;/p&gt;

&lt;h2&gt;🌮TACO TUESDAY&lt;/h2&gt;

&lt;p&gt;We decided to embrace Taco Tuesday! Every Tuesday we have Taco Night, which means wanting to track recipes that are taco-friendly.&lt;/p&gt;

&lt;p&gt;We added a Taco? yes/no “choice” field to recipes. And we added a Taco-specific view for when we wanted to pick this week’s taco proteins. And since we’d learned about Unicode support, Taco recipe names are always prepended with 🌮, based on the field.&lt;/p&gt;

&lt;h2&gt;A Restaurant Closed?!&lt;/h2&gt;

&lt;p&gt;Oops. COVID-19 claimed a business. We added a “Closed/Avoid” selection field that allows us to filter the closed places out of the Choice view. And we can use this if we have a lousy experience at a restaurant.&lt;/p&gt;

&lt;h2&gt;Summing Up&lt;/h2&gt;

&lt;p&gt;Planning is now a simple pass over the Choice Views, looking at what we like but have not done recently. Pick 4-5, iterate. Option anxiety reduced. It’s also easy to answer, “DIDN’T WE JUST HAVE THAT?”&lt;/p&gt;

&lt;p&gt;What did I learn? A spreadsheet is a great place to start with any new app that is data-related. There’s a threshold you cross where project’s complexity begs for multiple tabs, conditional logic, and &lt;em&gt;gasp&lt;/em&gt; queries. When you see that threshold, taking a look at &lt;a href="https://www.airtable.com"&gt;Airtable&lt;/a&gt;, or maybe the newly announced &lt;a href="https://tables.area120.google.com/u/0/home"&gt;Google Tables&lt;/a&gt;, is a good investment.&lt;/p&gt;

</content>
    <published>2020-09-23T17:00:00-07:00</published>
    <updated>2021-05-15T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Improving Standups</title>
    <link href="https://dwf.bigpencil.net/improving-standups/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">One simple technique to tame your suddenly unwiedly daily standup meeting.</summary>
    <content type="html">
&lt;p&gt;Your software development team has a daily standup meeting. How’s that going?&lt;/p&gt;

&lt;p&gt;Teams at Pivotal had a fairly common agenda for standup. We reviewed Helps (“I need help with…”), Interestings (“Yesterday I learned that…), and Events (“What are we doing besides coding today?”). We rarely got into the details of specific work unless there were team-wide concerns or if someone had a specific question.&lt;/p&gt;

&lt;p&gt;Keeping to this agenda daily and keeping the ritual alive over time takes effort. We wrote a Rails app to help. Over time we realized that there are additional, some emergent, problems that cropped up during our meetings.&lt;/p&gt;

&lt;h2&gt;Standup Problems&lt;/h2&gt;

&lt;p&gt;I have seen many problems in common across several teams. Some are just informational:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What is the agenda for today’s standup?&lt;/li&gt;
  &lt;li&gt;When I find an item to discuss at standup tomorrow, how do I not forget to bring it up?&lt;/li&gt;
  &lt;li&gt;Which events are coming up in the next week?&lt;/li&gt;
  &lt;li&gt;Who’s on vacation and when?&lt;/li&gt;
  &lt;li&gt;What stories (or epics, or tracks) is the team working on? Which pairs are working on them?&lt;/li&gt;
  &lt;li&gt;What are today’s pair assignments?&lt;/li&gt;
  &lt;li&gt;What are the active action items I have from team retrospectives?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Others problems are more structural:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is enough structure to make the meeting productive, but not so much to be a burden.&lt;/li&gt;
  &lt;li&gt;The ritual is lightweight enough to allow for iteration, but solid enough to perpetuate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having some sort of physical board present in a team’s area can work well. Put this information in one place, use it to drive the daily ritual, and it lives the rest of the day as an information radiator for the team and the rest of the office. Some Cloud Foundry teams even had &lt;a href="https://www.amazon.com/s?k=fuji+instax"&gt;Fuji Instax&lt;/a&gt; photos of each team member and moved them around to identify pairings and which stories they were implementing.&lt;/p&gt;

&lt;p&gt;The physical board breaks down as soon as the team has one remote team member. Given how COVID-19 has made so many teams fully remote, what can we do?&lt;/p&gt;

&lt;p&gt;We move the board online.&lt;/p&gt;

&lt;p&gt;(Credit to the Cloud Foundry CAPI team - a semi-remote team even in 2018 - where I first saw this solution.)&lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;What you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An online kanban board&lt;/li&gt;
  &lt;li&gt;Digital avatar photos of each team member&lt;/li&gt;
  &lt;li&gt;A standup agenda.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to use &lt;a href="https://trello.com"&gt;Trello&lt;/a&gt; in this example, but things like &lt;a href="https://miro.com"&gt;Miro&lt;/a&gt; or even a &lt;a href="https://drive.google.com"&gt;Google Spreadsheet&lt;/a&gt; can work. For the agenda, I’m going to use Helps/Interesting/Events/Pairing Assignment.&lt;/p&gt;

&lt;p&gt;Then you should set it up like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Left Column is “Standup”; it holds divider cards for each agenda item.&lt;/li&gt;
  &lt;li&gt;The next Columns are just labeled “Track”; we’ll have 2 tracks in this example&lt;/li&gt;
  &lt;li&gt;The next column is the “Pairing Parking Lot”&lt;/li&gt;
  &lt;li&gt;Lastly, a column for the “Retro Action Items”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
Now you can add one card for each team member to the Pairing Parking Lot. Your board should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/standup/early-63201996.jpg" alt="Early Setup" /&gt;&lt;/p&gt;

&lt;p&gt;Everyone on the team should have access to this board so they can add cards as needed during the day. Peer teams can have read or read/write access, depending on your organization’s norms.&lt;/p&gt;

&lt;p&gt;Great! How do we use it?&lt;/p&gt;

&lt;h2&gt;Standup&lt;/h2&gt;

&lt;p&gt;Standup is probably in a video call with everyone present. The emcee can now share their screen, reviewing cards in the lefthand column, top-to-bottom. Trello allows for a single keystroke to archive cards as you finish them.&lt;/p&gt;

&lt;h2&gt;Pair Assignments&lt;/h2&gt;

&lt;p&gt;After the lefthand column is complete the team can discuss the day’s work. This means shuffling and assigning pairs to the available tracks of work. Whatever your pair rotation strategy - daily splits, track anchoring, etc. - your decisions should be reflected by moving the cards around.&lt;/p&gt;

&lt;p&gt;The “Pairing Lot” is a place to put people’s cards when they are away from the team. Or while you decide assignments for the day (hence the example’s dividers for available/unavailable).&lt;/p&gt;

&lt;h2&gt;Retrospective Action Items&lt;/h2&gt;

&lt;p&gt;This board can also be a place to track and remind team members about their action items from retrospectives. Even if you use software to run your retros, this board can surface them daily. Action items that stay top-of-mind are more likely to be completed.&lt;/p&gt;

&lt;h2&gt;As Things Change&lt;/h2&gt;

&lt;p&gt;In full use, the board will look more like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/standup/full_setup-7e21b62b.jpg" alt="Full Standup" /&gt;&lt;/p&gt;

&lt;p&gt;(or play with the &lt;a href="https://trello.com/b/qcJ1Ba56/standup-example#"&gt;live example&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;After standup, changes that affect the team should lead to updating the board.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vacation on the horizon? Or team rotation about to happen? Add a card to Events.&lt;/li&gt;
  &lt;li&gt;Find a help or interesting during the day? Add a card.&lt;/li&gt;
  &lt;li&gt;New team member? Add their card. On their first day, use the exercise of adding their photo to verify they have access and then explain the ritual.&lt;/li&gt;
  &lt;li&gt;Starting a new story or track? Rename the Track column. Or even better? Add a card.&lt;/li&gt;
  &lt;li&gt;Another team member action item pops up? Add a card.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Iteration&lt;/h2&gt;

&lt;p&gt;A developer may look at this and see opportunities for automation. Or maybe frustration that software isn’t choosing pairings, or tracking frequency of certain pairs…&lt;/p&gt;

&lt;p&gt;This is just a starting point. It is ripe for innovation and iteration. Knock yourself out. But be careful of the yaks you choose to shave - it’s just for five minutes out of your team’s day. Do what works.&lt;/p&gt;

</content>
    <published>2020-09-21T17:00:00-07:00</published>
    <updated>2023-07-17T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Foo Fighters 1995</title>
    <link href="https://dwf.bigpencil.net/foo-fighters-1995/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">My Foo Fighters Tweets.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;A tweetstorm I wrote up in September, 2020, from being at a very early Foo Fighters’ show. I’ve migrated this away from being embedded tweets because Twitter/X. I’ve kept it &lt;a href="https://twitter.com/dwfrank/status/1305724884052443136"&gt;linked&lt;/a&gt; for history’s sake. Refreshed with links and some text formatting. –dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My Amazing Rock’n’Roll moments. Next in a series.&lt;/p&gt;

&lt;p&gt;Foo Fighters first tour. &lt;a href="https://www.foofighterslive.com/shows/13th-may-1995-la-luna-32"&gt;May 13th, 1995&lt;/a&gt; (or maybe the &lt;a href="https://www.setlist.fm/setlists/foo-fighters-bd6893a.html"&gt;July 24th show&lt;/a&gt;, I’m not sure&lt;sup id="fnref:1" role="doc-noteref"&gt;&lt;a href="#fn:1" class="footnote" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;). Portland, Oregon. &lt;a href="https://en.wikipedia.org/wiki/La_Luna_(Portland,_Oregon)"&gt;La Luna&lt;/a&gt;. An amazing venue that doesn’t do rock shows anymore.&lt;/p&gt;

&lt;p&gt;But an absolutely AMAZING mosh pit. Near the end of the show, the band took a short breather to change guitars or something. And we all stood there, spent.&lt;br /&gt;&lt;br /&gt;Then they started “Exhausted.” But nobody was dancing. We were all too tired.&lt;/p&gt;

&lt;p&gt;I was in the middle of the room at the edge of a big circle of people. I wanted to keep the excitement. After a 30 seconds or so, when the song is still slow, I tucked in my arms and started rolling slowly to the tempo off of everyone along the inside of the circle.&lt;/p&gt;

&lt;p&gt;Just me became two or three, then four people. Not crazy dancing, but just building. And building. Just like the song. By the crescendo we had the pit at full strength. That song felt like it went on forever. Just forever. It was so special.&lt;/p&gt;

&lt;p&gt;Fast forward about 4 months. The tour is wrapping up. And I’m listening to a Westwood One radio interview with the band on a Sunday night. They start taking calls from the audience. “What was your favorite show during this tour?”&lt;/p&gt;

&lt;p&gt;Dave Grohl - “It’s just so great to be on tour. That we’ve picked up fans and they’ve embraced us. And the shows everywhere have been beyond what we’ve could have ever expected.”&lt;/p&gt;

&lt;p&gt;Then one of the other band members jumps in. “Remember that one night in Portland? When they started &lt;em&gt;moshing&lt;/em&gt;? To f’n &lt;em&gt;Exhausted&lt;/em&gt; ? That never happens.”&lt;/p&gt;

&lt;p&gt;Dave - “Oh, yeah. So cool. By the end of the song that was &lt;em&gt;nuts&lt;/em&gt;. What a show!”&lt;/p&gt;

&lt;div class="footnotes" role="doc-endnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1" role="doc-endnote"&gt;
      &lt;p&gt;I think it was likely the May show, as I recall it being short. Regardless, it makes a better story with &lt;em&gt;Exhausted&lt;/em&gt; being the last song. &lt;a href="#fnref:1" class="reversefootnote" role="doc-backlink"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2020-09-14T17:00:00-07:00</published>
    <updated>2023-09-13T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Drake Your Job</title>
    <link href="https://dwf.bigpencil.net/drake-your-job/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">In which I use math to evaluate if I should switch jobs and which job I should accept.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;I originally published this on &lt;a href="https://blog.usejournal.com/drake-your-job-5c55b706bb18"&gt;Medium&lt;/a&gt; in 2018. I’ve made a few copy edits, but the content and intent is the same. &lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;–dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;How much do you love your job? You can measure some job characteristics like salary, benefits, or round-trip commute time. But what about the intangibles? Do you have a good manager? Are you learning? Are you happy? Measuring these abstract things seems hard. But if we can’t measure it, how can we improve it?&lt;/p&gt;

&lt;p&gt;What if you measured everything about your job and calculated an overall score? You could pick an area to change to improve your score. Or you could compare the score of your current job and new potential jobs. How can you turn this mix of concrete numbers, fuzzy feelings, and abstract concepts into useful information in order to help direct your career?&lt;/p&gt;

&lt;h2&gt;The Drake Equation&lt;/h2&gt;

&lt;p&gt;At the birth of SETI.org, Dr. Frank Drake decided to estimate the number of potential planets with intelligent life. And while it’s a very rough estimate, the birth of the Drake Equation calculated a number that inspired scientists to reach for the stars.&lt;/p&gt;

&lt;p&gt;What does this have to do with valuing your job?&lt;/p&gt;

&lt;p&gt;Michael Dearing of Harrison Metal has &lt;a href="https://www.harrisonmetal.com/library/drake-s-equation"&gt;a video&lt;/a&gt; and a &lt;a href="https://medium.com/@mcgd/drakes-equation-e967535a76ac"&gt;blog post&lt;/a&gt; that shares the Drake Equation’s history and suggests that it’s applicable to any seemingly unquantifiable thing. What would it look like to build a “Drake Job Equation,” taking into consideration all the components of your job? Let’s give it a try.&lt;/p&gt;

&lt;h2&gt;What’s Important?&lt;/h2&gt;

&lt;p&gt;First, list which job characteristics are important to you. Take some time and make a list. Here’s what I came up with, based on what matters to me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Compensation&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Money matters! Base salary, any bonus, stock options or shares, and benefits.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Organization&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;How do I feel about the company or organization? Do my leaders inspire me? Do my values align?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Manager&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Is my manager helpful in my career? Do we meet regularly? Do they listen? Do they explain the “Why?” as well as the “What?” when I have questions?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Peers&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Do they have my trust and respect? Do I have coffee and lunch buddies? Do I invite them over for dinner?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Commute&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;How long do I spend getting to the job every day? Does it leave me enough time for the rest of my life?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Office location&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Is the office in a place that inspires me daily? Is it easy to schedule time with my friends and mentors at other companies? Can I run errands at lunch?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The company’s main product or service&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Is my work going toward a product or service that I admire or respect? That I would use regularly? Would I be proud to recommend it to friends and family?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The work&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Is the work I’m doing energizing to me? Is it fun? Is it interesting?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Opportunity to learn&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Are I adding to my skillset? Is this job going to help me get the next one?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Drake Job Equation&lt;/h2&gt;

&lt;p&gt;Now that you have a list of potential terms, you need to combine them into a Drake equation. Let’s assume that the compensation is the base of your score. The other terms should increase or decrease that to get a final value. The bigger the score, the better the job is likely to be. A lower score should be a catalyst to do some deeper thinking.&lt;/p&gt;

&lt;p&gt;Combining my terms, I got this formula:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Value.job = 
    C × 
    Q.org × 
    Q.mgr × 
    Q.peers × 
    Q.commute × 
    Q.location × 
    M.product ×
    M.work × 
    Freq.learning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;C&lt;/code&gt; is compensation. Start with cash salary. Add any bonuses. Add the net gain from any stock options, RSU’s, or an employee stock program. And don’t forget any other benefits — health insurance, discount on public transit, gym memberships, etc. Add those in. If you don’t have exact amounts for any of your compensation numbers — for example, your company isn’t public yet so you can only guess about stock options — just make a reasonable estimate.&lt;/p&gt;

&lt;p&gt;The next group of other terms is for “quality” terms. Each of these terms needs a range of values that reduces or amplifies the score based on each term’s impact. I recommend a range of 0.1 to 2. A value of 0.1 maps to “poor quality” or “this part of my job sucks.” This low term should be pulling down the overall job score. Why 0.1? Because we need to talk about zeroes.&lt;/p&gt;

&lt;p&gt;Any low term will pull your score down significantly. Be honest as you ask yourself about each term. But a zero will make the entire score zero. If your final job score is zero, it’s probably time to open up LinkedIn. A value of 0.1 serves as a nice floor that sends the right message without screaming “QUIT” and rendering the rest of the formula moot.&lt;/p&gt;

&lt;p&gt;A 1 means things are “just OK”. A value of 1 doesn’t reduce or amplify the overall score. A 2 means that things are “GREAT”, meaning it doubles your overall score. And keeping the ceiling at 2 means that any one term does not overwhelm the rest.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Q.org&lt;/code&gt;- Quality of Organization&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Q.mgr&lt;/code&gt;- Quality of Manager&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Q.peers&lt;/code&gt; - Quality of Peers&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Q.commute&lt;/code&gt; - Quality of Commute&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Q.location&lt;/code&gt; - Quality of Location&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next group is for motivation scores. Motivation matters a lot to me, so I decided on a higher ceiling of 5. Finally, I want to be wokring at place were I am learning new things. This feels like a motivational item. So these three have a range of 0.1 up to 5.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;M.product&lt;/code&gt; - Motivation from Product&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;M.work&lt;/code&gt; - Motivation from Work&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Freq.learning&lt;/code&gt; - Frequency of Learning Opportunities&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Using The Equation&lt;/h2&gt;

&lt;p&gt;Let’s say your total compensation comes out to $50,000 this year. You love the company, have a pretty good manager, fine teammates, a soul-sucking commute, a great location, you love the product, don’t love the work you’re doing, and you are learning a reasonable amount. Using my equation, we get this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;50,000 × 2 × 1.25 × 1 × 0.25 × 2 × 3 × 2 × 3 = 1,125,000&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you have a score. What do you do with it?&lt;/p&gt;

&lt;p&gt;Just doing the evaluation is helpful. You now have a list of items worth investigating for improvement — those things that are preventing you from getting more out of your current job. Your commute is awful, but you love the location. Can you carpool with some coworkers? Is there a public transit option? Your current work isn’t exciting, but you like the company and product. Can you bring this up with your manager? Could you transfer to another job in the company?&lt;/p&gt;

&lt;p&gt;But if the areas for improvement are all outside of your control, maybe it’s time to look for a new job. Evaluate each term as you interview at a company and score each opportunity. Compare these scores as you go.&lt;/p&gt;

&lt;p&gt;You won’t have an offer yet, but you can play with the compensation value. What compensation amount would make you take an offer? Haven’t met enough of the team to make a guess about the peers? Schedule a follow-up lunch. Curious about other aspects of the new job? Use your network to find folks who can help you refine your estimates. There will be lots of ambiguity. Resolve what you can and estimate the rest.&lt;/p&gt;

&lt;p&gt;Getting to a score is a tool, not a conclusion. So get as close as is practical that helps you answer the question at hand. Do you love your job? How about your next one?&lt;/p&gt;

&lt;p&gt;What are the components of &lt;em&gt;your&lt;/em&gt; Drake Job Equation?&lt;/p&gt;
</content>
    <published>2018-08-02T17:00:00-07:00</published>
    <updated>2023-08-28T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Goodbye Chris Cornell</title>
    <link href="https://dwf.bigpencil.net/goodbye-chris-cornell/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Remembering my Soundgarden encounter.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;Originally written as a &lt;a href="https://twitter.com/dwfrank/status/865661929800335360"&gt;tweetstorm&lt;/a&gt; after Chris Cornell’s suicide. I’ve expanded a bit more here.&lt;br /&gt;
&lt;br /&gt;—dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I have a Soundgarden story.&lt;/p&gt;

&lt;p&gt;July 1990, London. I was helping chaperone some high school students on a canonical “American Suburban Kid European Tour.”&lt;/p&gt;

&lt;p&gt;It’s after 11pm. Everything is closed, so we headed back from wandering around town to sit and talk in the lobby lounge of our nice, but much older hotel.&lt;/p&gt;

&lt;p&gt;We’ve been there for some time when the window to the street slides open. Four dudes, dressed all in black, and &lt;em&gt;very&lt;/em&gt; drunk, crawl through and plotzed down in the chairs next to us.&lt;/p&gt;

&lt;p&gt;It was Soundgarden.&lt;/p&gt;

&lt;p&gt;The kids didn’t know them. I barely did. A hotel clerk walked over and closed the window, saying a very English nothing.&lt;/p&gt;

&lt;p&gt;I talked music with Kim Thayil for a bit. “Athens. We played Athens. I love Athens. Come see us next time we’re in town.” Sadly, I never saw them live. In Athens or elsewhere.&lt;/p&gt;

&lt;p&gt;All I remember of Chris Cornell was the &lt;em&gt;hair&lt;/em&gt;. And the high school girls crushing just by staring into those eyes (when they were open).&lt;/p&gt;

&lt;p&gt;After some time a different clerk came and shooed us all out of the lobby.&lt;/p&gt;

&lt;p&gt;But I became a fan. &lt;a href="https://www.youtube.com/watch?v=dApSggATER4"&gt;Badmotorfinger&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=FbNIR6dkgNY&amp;amp;list=PLnif9Rfb5AdnVpmUboC3SEZFbcGu80Ea8"&gt;Superunknown&lt;/a&gt; are great albums. That &lt;em&gt;voice&lt;/em&gt;. His &lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=W_T5aLjJ048"&gt;Ave Maria&lt;/a&gt;&lt;/em&gt; is key to my Christmas playlist. I miss him even though I’ve not liked his more recent songs.&lt;/p&gt;

&lt;p&gt;Love your friends. Especially when you know they hurt.&lt;/p&gt;

&lt;p&gt;This is what #adulting is all about.&lt;/p&gt;

</content>
    <published>2017-05-17T17:00:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Goodbye Jonathan Demme</title>
    <link href="https://dwf.bigpencil.net/goodbye-jonathan-demme/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">Remembering how Jonathan Demme made me a Talking Heads fan.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;Originally written as a &lt;a href="https://twitter.com/dwfrank/status/857378526428667904"&gt;tweetstorm&lt;/a&gt; on the death of Jonathan Demme. I’ve expanded a bit more here.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;—dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I wasn’t much of a Talking Heads fan. I liked them fine.&lt;/p&gt;

&lt;p&gt;I appreciated their quirky melodies &amp;amp; artsy videos in contrast to the rest of early MTV.&lt;/p&gt;

&lt;p&gt;That changed when the older brother of a friend heard I had not only a stereo VCR, but an amplifier and a tape deck that connected to it.&lt;/p&gt;

&lt;p&gt;Thus I found myself one Friday evening taping to cassette (you know, chrome-age “ripping”), the entirety of &lt;a href="https://en.wikipedia.org/wiki/Stop_Making_Sense"&gt;Stop Making Sense&lt;/a&gt; with someone I didn’t know that well. By the end of the night, we were both excited to have one of the best rock concert movies that we could play just about anywhere.&lt;/p&gt;

&lt;p&gt;Likely watching &lt;a href="https://en.wikipedia.org/wiki/Storefront_Hitchcock"&gt;Storefront Hitchcock&lt;/a&gt; tonight.&lt;/p&gt;

&lt;p&gt;RIP and &lt;em&gt;Thank You&lt;/em&gt;, Mr. Demme.&lt;/p&gt;
</content>
    <published>2017-04-25T17:00:00-07:00</published>
    <updated>2023-07-12T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>How One Funny Email Almost Changed My Career</title>
    <link href="https://dwf.bigpencil.net/how-one-funny-email-almost-changed-my-career/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">How to write a goodbye email that people remember for years.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://medium.com/@dwfrank/how-one-funny-email-almost-changed-my-career-80b20ee7c5ff"&gt;Medium&lt;/a&gt;. But really originally published on Palm’s Outlook server in 2006.&lt;br /&gt;
&lt;br /&gt;–dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In 2006 it was time that I left my job at Palm. When you leave a job in tech, you send a goodbye email.&lt;br /&gt;
When you think yourself a fun and funny co-worker, you want that email to be &lt;em&gt;hilarious&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Subject: Where’s DWF? as of 6/2&lt;/p&gt;

  &lt;p&gt;Thanks so much for your good wishes in the past week. Many of you have asked what I’m going to be doing after Palm. You know I can’t keep a secret from you guys for long. So here are the details.&lt;/p&gt;

  &lt;p&gt;I’ve decided to get out of the crazy world of high tech and pursue success in the low-margin, high hype world of the beverage industry. It won’t be long before my line of energy drinks, GoJ (pronounced “GO-J”), hits the shelves of your local quickie-, super- or mega-mart.&lt;/p&gt;

  &lt;p&gt;GoJ will start with good old-fashioned orange juice and finish laced with the FDA maximum concentration of caffeine. None of this high fructose corn syrup water that tastes like it might have been mixed in an orange container. Instead we’ll use only the best fresh-squeezed, flash-pasteurized juice mixed with the purest caffeine molecules our state-of-the-art laboratory can synthesize.&lt;/p&gt;

  &lt;p&gt;Our first target customers are the Slashdot crowd, selling them on the fact that one 500ml bottle not only has the equivalent caffeine to 6 cans of Jolt Cola or 4 cans of Red Bull (or just one cup of 2nd-floor Peet’s coffee), but it also meets their recommended daily allowance of fruits and vegetables. The web ad campaign, with our initial slogan “I’m on it!”, will run late summer featuring none other than Palm’s own &lt;NAME REDACTED=""&gt;.&lt;/NAME&gt;&lt;/p&gt;

  &lt;p&gt;Next we’ll move to a broader customer base with other flavors, including lemonade, strawberry-kiwi, and a proprietary blend of guava, apple, starfruit and pineapple we’re calling “GoJ-GASP.”&lt;/p&gt;

  &lt;p&gt;At some point we’ll need a sports celebrity spokesperson. I’m thrilled to announce that we’re in negotiations to sign Barry Bonds. Millions of kids will drink GoJ and declare under oath our new slogan “It’s the juice!”&lt;/p&gt;

  &lt;p&gt;Keep in touch. I’m on LinkedIn. And if ever want to make the leap out of tech, we’ll be looking for people to drive the delivery trucks.&lt;/p&gt;

  &lt;p&gt;–dwf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got the laughs, kudos and high-fives I wanted. And I went on with my last days. But funny emails get forwarded.&lt;/p&gt;

&lt;p&gt;My last few days were spent explaining the joke. And the references. And the fact that no, I didn’t have any juice you could try. Or delivery trucks. Or job applications. Or a job.&lt;/p&gt;

&lt;p&gt;Three weeks later, I got a call from a friend-of-a-friend-of-a-coworker who was a beverage distributor in LA. I think he wanted to invest.&lt;/p&gt;

&lt;p&gt;Eight years later, at a Handspring/Palm reunion party I was talking shop with someone who received the email directly that day. She looked at me, squinted and asked, “Wait. I thought you were making juice?”&lt;/p&gt;

&lt;p&gt;I guess I do.&lt;/p&gt;

</content>
    <published>2016-10-05T17:00:00-07:00</published>
    <updated>2023-07-06T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>How We XP: Develop &amp; Deploy</title>
    <link href="https://dwf.bigpencil.net/how-we-xp/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">A short summary of how I think about the path of features from development, through Continuous Integration, and into Production.</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;Originally written (and posted to &lt;a href="https://medium.com/@dwfrank/how-we-xp-develop-deploy-13faf089420b"&gt;Medium&lt;/a&gt;) for a friend who while around software for a while, and seen some agile teams, he was just starting to manage one directly. So I wrote up this bit of a braindump.&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;–dwf&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m not going to go into planning. That’s another post.&lt;/p&gt;

&lt;p&gt;I’m going to assume that stories — the work that is to be done — are broken into small, individually-acceptable pieces of work. “Acceptable” means that a Product Manager (PM) can verify that developers did the agreed work completely. Keeping the stories small means it is easier to make progress, show progress, and validate progress.&lt;/p&gt;

&lt;p&gt;I’m also assuming that the team is using git for version control, the developers are test-driving their code (Test-driven Development or TDD), the current test suite is green on a Continuous Integration system (CI), and that we are talking about a web app.&lt;/p&gt;

&lt;h2&gt;Development&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;All new development is done locally&lt;/li&gt;
  &lt;li&gt;Developers pull up to latest code and run the test suite. It should be green. If not, fix it and push back to origin before continuing.&lt;/li&gt;
  &lt;li&gt;Developers test drive the new feature.&lt;/li&gt;
  &lt;li&gt;When developers think the story is done based on the acceptance criteria agreed-upon with the PM, all tests should be green and the new functionality should be working as expected.&lt;/li&gt;
  &lt;li&gt;This is a great time for developers to find refactoring or dead code and clean those up as well. Tests should stay green.&lt;/li&gt;
  &lt;li&gt;Developers now pull up to latest code from origin in case another part of the team has pushed new code. If there are changes, merge and run tests again. If there are broken tests, fix them before continuing.&lt;/li&gt;
  &lt;li&gt;Optional: some teams like feature branches. They should be short-lived and merged/re-based with master often. The longer your changes stay away from master, the more tech debt you create. Merge early, merge often. Git-flow is a pretty good pattern here.&lt;br /&gt;
= Once all tests are green locally and all changes are ahead of origin master, push to origin.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Continuous Integration (CI)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Your git repo should have a post-commit hook that starts a CI build. On every push to master, no exceptions.&lt;/li&gt;
  &lt;li&gt;This is a full test run on a server that looks as close to your Production deploy configuration as possible.&lt;/li&gt;
  &lt;li&gt;This can be a long pipeline. Run unit tests, run integrations and functional tests and regression tests - whatever. Often your pipeline will have later stages that integrate multiple apps/services and cross-browser tests. Make sure you are getting feedback at all stages of the pipeline.&lt;/li&gt;
  &lt;li&gt;When CI is green all the way, you should have a CI step that deploys to Staging. This should happen several times per day. And if it’s automated, even better.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Staging (aka Acceptance)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Staging is a deployment (or environment) that looks exactly like Production, with the same versions of OS, database, etc.&lt;/li&gt;
  &lt;li&gt;Staging doesn’t need to serve the same capacity — so maybe just a primary database (no replication or secondaries ). Since there will be fewer active users, you probably only need one app server.&lt;/li&gt;
  &lt;li&gt;Optional: If your system has feature that needs acceptance that requires master/slave DB or app server failover, then by all means install/configure Staging to match that configuration.&lt;/li&gt;
  &lt;li&gt;Everyone should know when a Staging deploy is done and what new work it contains. Notify the team via email or an information radiator.&lt;/li&gt;
  &lt;li&gt;PM should verify work is done as expected on Staging. Validating that work is complete is PM’s role, Not QA.&lt;/li&gt;
  &lt;li&gt;If work is not satisfactory, Reject the work. Rejected work should be started before any new work is started.&lt;/li&gt;
  &lt;li&gt;If something is broken that used to work, PM writes a bug. PM should prioritize bugs against other work. That is, a given bug may not be as important to fix as some new feature stories.&lt;/li&gt;
  &lt;li&gt;QA should be looking at Staging to find bugs, problems, regressions, or any inconsistencies. They should be using the product as a user would and should be looking for behavior that engineering and product didn’t find. This is often called exploratory QA. You should have your QA lead read the book on Exploratory QA, &lt;a href="https://www.amazon.com/Explore-Increase-Confidence-Exploratory-Testing/dp/1937785025"&gt;Explore It!&lt;/a&gt; written by my good friend and colleague, &lt;a href="https://twitter.com/testobsessed"&gt;Elisabeth Hendrickson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Production&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Production is where the shipping product lives.&lt;/li&gt;
  &lt;li&gt;When all stories on Staging have been accepted, PM should consider pushing that version of the code to Production.&lt;/li&gt;
  &lt;li&gt;If users will have a bad experience due to known bugs or an incomplete user experience, then don’t push to Production.&lt;/li&gt;
  &lt;li&gt;Push to Production has often as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Other Deploys&lt;/h2&gt;

&lt;p&gt;This list is by no means exhaustive. But small-to-medium-sized projects tend to have one or more of these deploys.&lt;/p&gt;

&lt;h3&gt;Patch Staging&lt;/h3&gt;
&lt;p&gt;A copy of Staging, meant as a short-lived deploy just to verify a hot-fix. Using a second Staging means mainline work doesn’t slow down while a patch is developed and shipped. Same rules as Staging apply, but tear this deploy down as soon as the fix is deployed to Production.&lt;/p&gt;

&lt;h3&gt;Demo&lt;/h3&gt;
&lt;p&gt;A copy of Staging, meant as a short-lived deploy for specific set of users for a short amount of time. Like a PatchGood use cases for a Demo deploy include demoing to potential investors and user research. Tear this deploy down as soon as the demo is over or when feedback is no longer required.&lt;/p&gt;

&lt;h3&gt;Integration/User Acceptance Test&lt;/h3&gt;
&lt;p&gt;A copy of Staging that can be used for more real-world testing. This usually stays in line with the normal Staging and is used for CI pipelines. Some examples are performance testing, smoke testing, and long user scenario testing.&lt;/p&gt;

&lt;h2&gt;Not Scary&lt;/h2&gt;

&lt;h3&gt;Continuous Delivery&lt;/h3&gt;

&lt;p&gt;What’s described above is Continuous Delivery; insist that code always move in one direction: towards Production. Also, set up the whole team so that it’s easier to move towards Production and release often.&lt;/p&gt;

&lt;h3&gt;Production Patches&lt;/h3&gt;

&lt;p&gt;Here’s how you should deal with hot-fixes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Developers branch from the last Production deploy version.&lt;/li&gt;
  &lt;li&gt;Developers fix the bug.&lt;/li&gt;
  &lt;li&gt;CI runs against this version of the code to ensure no regressions.&lt;/li&gt;
  &lt;li&gt;Developers deploy this version to a temporary Staging environment.&lt;/li&gt;
  &lt;li&gt;PM accepts the fix.&lt;/li&gt;
  &lt;li&gt;Developers push this branch to Production.&lt;/li&gt;
  &lt;li&gt;Developers merge the fix back to master.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Sometimes Scary&lt;/h2&gt;

&lt;h3&gt;Continuous Deployment&lt;/h3&gt;

&lt;p&gt;Some teams are able to push &lt;em&gt;every&lt;/em&gt; green build to Production. I’m not going to cover this in this post. But there is additional process and code needed to support this.&lt;/p&gt;

&lt;h2&gt;Scary&lt;/h2&gt;

&lt;p&gt;These are the things you should truly worry about.&lt;/p&gt;

&lt;h3&gt;Long duration test suites&lt;/h3&gt;

&lt;p&gt;When your test suite or CI pipeline is too long, you run the risk of completing work faster than you can verify it. If you keep locally-run suites fast - say, under 10–20 minutes - then your developers can get features to staging multiple times a day. Long CI pipelines are less awful. For example, a web app can have a multi-stage pipeline that puts an all-browser compatibility suite near the end. Main development can continue based on success of unit tests, collaboration tests, and one browser stage of tests. Then the multi-browser suite can run once or twice a day, and browser-based problems from that stage can be bugs that get prioritized against other work.&lt;/p&gt;

&lt;h3&gt;Long-lived branches&lt;/h3&gt;

&lt;p&gt;Like long test suites, this can keep your feedback loops long. In this case you have bigger risks around the rest of your app changing faster than the branch’s work can keep up. If it’s taking too long to merge something back to master, then consider that the work should be broken up into smaller bits or should be started when its dependencies are more stable.&lt;/p&gt;

&lt;h3&gt;Complex merges&lt;/h3&gt;

&lt;p&gt;This usually comes from long-lived branches. Keeping all development on master helps to minimize this.&lt;/p&gt;

&lt;h3&gt;Manual deployment&lt;/h3&gt;

&lt;p&gt;…either manual configurations and/or inconsistent deployments from Product &amp;amp; Staging. These are often related. You want Staging, Production, and any other deploys to have consistent configuration. Bugs due to different code interpreters, databases or OS libraries are very subtle and guaranteed time wasters. Invest in DevOps or a Platform-as-a-Service (PaaS) in order to keep your deploys consistent and repeatable.&lt;/p&gt;

&lt;h3&gt;Breaking the Stream&lt;/h3&gt;

&lt;p&gt;Code should always move towards Production. It increases the confidence in the code and keeps regressions low. When a fix is made downstream of development, then it’s harder than normal development to integrate that fix back in development.&lt;/p&gt;
</content>
    <published>2015-10-31T17:00:00-07:00</published>
    <updated>2021-05-15T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Bose Customer Service</title>
    <link href="https://dwf.bigpencil.net/bose-customer-service/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">SPOILER ALERT: Sometimes big companies don't suck.</summary>
    <content type="html">&lt;p&gt;I have a set of Bose QC2 noise-canceling headphones that I use every day. I bought them in late 2007. They don’t make my BART commute quiet, but they make it tolerable enough that I can listen to music and podcasts.&lt;/p&gt;

&lt;p&gt;Within the first year the wire started to fray a little. I walked into the Bose store in San Francisco and without blinking they gave me a new cable. Very cool.&lt;/p&gt;

&lt;p&gt;Another couple of years later and my sweaty, bald head had caused the ear cups and cushioned underside of the head band to wear out. I ordered new ear cups ($35 + shipping) from their website and made a mental note to call tech support about replacing the headband when I had a chance.&lt;/p&gt;

&lt;p&gt;Yesterday two things happened. First, the new ear cups arrived. And then I noticed the cable fraying again in the same spot - the insulation is pulling away from the jack. So now time to call and ask what should I do. I want to order the cable and the headband.&lt;/p&gt;

&lt;p&gt;Tyler has the rep who got my call. The cable was $15 and easy to replace. But the headband piece was not replaceable.&lt;/p&gt;

&lt;p&gt;“So you’ve already spent the $35 for the cups. I can certainly send you a new cable, which is $15 plus shipping. But we’re certainly sorry that you’ve had these issues with our product - they really should last longer than the few years you’ve had them.”&lt;/p&gt;

&lt;p&gt;I replied that the electronics are fine. But my glands are just outside Bose’s tolerances.&lt;/p&gt;

&lt;p&gt;“Here’s what we can do - for $89, plus tax and shipping, and $5 to ship your old headphones back to us, I can send you our newest equivalent model. We just released it in the last year or so and they’re lots better anyway.”&lt;/p&gt;

&lt;p&gt;Really?&lt;/p&gt;

&lt;p&gt;“Really.”&lt;/p&gt;

&lt;p&gt;Do I need to ship them right away? I’d like to use them on a business trip next week.&lt;/p&gt;

&lt;p&gt;“No problem. Print the mailing label when you get it in your email - it expires in a week. But the label is good for 90 days. If we don’t receive the old set by then, we’ll cancel the whole thing. So drop it in the mail when you get back. You’re all set. I’ll transfer you to our RMA department to send back the ear cups you’ve already received. No problem.”&lt;/p&gt;

&lt;p&gt;Damn.&lt;/p&gt;

&lt;p&gt;I didn’t get the second rep’s name, but he finished the transaction before I could tell him the whole story.&lt;/p&gt;

&lt;p&gt;I’m going to give Bose the benefit of the doubt that they’ll refurb what they can and dispose of the parts they can’t.&lt;/p&gt;

&lt;p&gt;Meanwhile? Super Happy Customer.&lt;/p&gt;
</content>
    <published>2011-04-20T17:00:00-07:00</published>
    <updated>2021-05-15T00:00:00-07:00</updated>
  </entry>
  <entry>
    <title>Kids &amp; Teachable Moments</title>
    <link href="https://dwf.bigpencil.net/kids-teachable-moments/" rel="alternate"/>
    <id/>
    <author>
      <name>Davis W. Frank</name>
    </author>
    <summary type="html">In which my son learns about lost luggage.</summary>
    <content type="html">
&lt;p&gt;Back to Work’s episode &lt;em&gt;&lt;a href="https://5by5.tv/b2w/8"&gt;Little Velvet Hands&lt;/a&gt;&lt;/em&gt; was in my head the other day, so I used it in a teachable moment with my son.&lt;/p&gt;

&lt;p&gt;We just took a family trip to Phoenix, AZ to catch a little Giants Spring Training (Merlin, that’s cricket). When we fly, we always have the kids, 5 &amp;amp; 9, pack &amp;amp; pull their own roller bags. All the better to teach how to navigate the whole airport thing. Plus ownership &amp;amp; responsibility is good, right?&lt;/p&gt;

&lt;p&gt;This trip they wanted to check their bags. BAGS FLY FREE on Southwest, so why not?&lt;/p&gt;

&lt;p&gt;On the flight home, we land at SFO and they lost my son’s bag - he’s the 5 year old.&lt;/p&gt;

&lt;p&gt;The boy,  “WHOO-HOO! I DON’T HAVE TO UNPACK TONIGHT!”&lt;/p&gt;

&lt;p&gt;As awesome as that is, that’s not what I came here to tell.&lt;/p&gt;

&lt;p&gt;I stood in line, behind bunches of the seriously grumpy people, I gave my phone number, I got the receipt. And we left.&lt;/p&gt;

&lt;p&gt;When Southwest called the next day to say the bag had been found they gave me the option to have it delivered or come pick it up and get a $50 voucher . We live close to SFO so I chose the latter.&lt;/p&gt;

&lt;p&gt;I chose to bring the boy. It was, after all, his bag. And he needed to pick it up.&lt;/p&gt;

&lt;p&gt;So we drove to the airport. I gave him the receipt. We walked in to the empty Southwest baggage claim area and to the baggage desk. Behind it was one woman who was clearly on a soul-sucking phone call in the middle of a soulless shift.&lt;/p&gt;

&lt;p&gt;When that call ended, she looked at me and said, nearly perky, “Can I help you?”&lt;/p&gt;

&lt;p&gt;And then a 5 year old boy pointed to the corner, handed her his receipt, and said, “That’s my suitcase.”&lt;/p&gt;

&lt;p&gt;She beamed. “Well then let’s get it checked out so you can take it home.”&lt;/p&gt;

&lt;p&gt;Clickity-clickity-clackity.&lt;/p&gt;

&lt;p&gt;The boy, “What happened so that my bag wasn’t with everybody else’s bags?”&lt;/p&gt;

&lt;p&gt;She, grinning, “Somebody forgot to put it on your plane. But we put it on the next one.”&lt;/p&gt;

&lt;p&gt;The boy, “You mean from Arizona?”&lt;/p&gt;

&lt;p&gt;She, “Yep.”&lt;/p&gt;

&lt;p&gt;The boy, “Ok.” &lt;beat&gt; "Thank you."&lt;/beat&gt;&lt;/p&gt;

&lt;p&gt;I sent this to not only to brag. But because what we talked about all the way home is how the lady was there waiting for him and that he made her smile while she did her job because he was nice.&lt;/p&gt;

&lt;p&gt;And that most people she dealt with during her day were mad that their luggage was missing and were NOT NICE to her. So it was important to remember that it was helpful to be nice when you can because it makes people smile.&lt;/p&gt;

&lt;p&gt;That and he had to unpack his bag when we got home.&lt;/p&gt;

&lt;p&gt;The boy, “Oh, MAN!”&lt;/p&gt;
</content>
    <published>2011-03-23T17:00:00-07:00</published>
    <updated>2023-07-17T00:00:00-07:00</updated>
  </entry>
</feed>
